//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WMS_WebAPI.Models.Context
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WMS_Entities : DbContext
    {
        public WMS_Entities()
            : base("name=WMS_Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalServiceCharge> AdditionalServiceCharges { get; set; }
        public virtual DbSet<AdditionalServiceDetail> AdditionalServiceDetails { get; set; }
        public virtual DbSet<AdditionalService> AdditionalServices { get; set; }
        public virtual DbSet<BankAccountDetail> BankAccountDetails { get; set; }
        public virtual DbSet<BankDetail> BankDetails { get; set; }
        public virtual DbSet<BarCode> BarCodes { get; set; }
        public virtual DbSet<BillingCycle> BillingCycles { get; set; }
        public virtual DbSet<Booking> Bookings { get; set; }
        public virtual DbSet<BookingDetail> BookingDetails { get; set; }
        public virtual DbSet<BookingLocation> BookingLocations { get; set; }
        public virtual DbSet<Brand> Brands { get; set; }
        public virtual DbSet<Challan> Challans { get; set; }
        public virtual DbSet<ChallanDetail> ChallanDetails { get; set; }
        public virtual DbSet<ChallanLocation> ChallanLocations { get; set; }
        public virtual DbSet<ChallanTransport> ChallanTransports { get; set; }
        public virtual DbSet<CheckListDetail> CheckListDetails { get; set; }
        public virtual DbSet<CheckListMaster> CheckListMasters { get; set; }
        public virtual DbSet<City> Cities { get; set; }
        public virtual DbSet<CompanyMaster> CompanyMasters { get; set; }
        public virtual DbSet<ContractDetail> ContractDetails { get; set; }
        public virtual DbSet<ContractType> ContractTypes { get; set; }
        public virtual DbSet<CountMaster> CountMasters { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CustomerActivation> CustomerActivations { get; set; }
        public virtual DbSet<CustomerAddOnService> CustomerAddOnServices { get; set; }
        public virtual DbSet<CustomerCart> CustomerCarts { get; set; }
        public virtual DbSet<CustomerContact> CustomerContacts { get; set; }
        public virtual DbSet<CustomerContract> CustomerContracts { get; set; }
        public virtual DbSet<CustomerCreditNote> CustomerCreditNotes { get; set; }
        public virtual DbSet<CustomerDocument> CustomerDocuments { get; set; }
        public virtual DbSet<CustomerLedger> CustomerLedgers { get; set; }
        public virtual DbSet<CustomerLimit> CustomerLimits { get; set; }
        public virtual DbSet<CustomerLogin> CustomerLogins { get; set; }
        public virtual DbSet<CustomerLogInHistory> CustomerLogInHistories { get; set; }
        public virtual DbSet<CustomerParty> CustomerParties { get; set; }
        public virtual DbSet<CustomerRateListHistory> CustomerRateListHistories { get; set; }
        public virtual DbSet<CustomerRate> CustomerRates { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<Customers_Demo> Customers_Demo { get; set; }
        public virtual DbSet<CustomerStorageArea> CustomerStorageAreas { get; set; }
        public virtual DbSet<CustomerType> CustomerTypes { get; set; }
        public virtual DbSet<DashboardDesigner> DashboardDesigners { get; set; }
        public virtual DbSet<DayClosing> DayClosings { get; set; }
        public virtual DbSet<DayStockRegister> DayStockRegisters { get; set; }
        public virtual DbSet<DeliveryOrder> DeliveryOrders { get; set; }
        public virtual DbSet<DeliveryOrderCancelled> DeliveryOrderCancelleds { get; set; }
        public virtual DbSet<DeliveryOrderDetail> DeliveryOrderDetails { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<Designation> Designations { get; set; }
        public virtual DbSet<Designer> Designers { get; set; }
        public virtual DbSet<Dispatch> Dispatches { get; set; }
        public virtual DbSet<DispatchCancelled> DispatchCancelleds { get; set; }
        public virtual DbSet<DispatchDetail> DispatchDetails { get; set; }
        public virtual DbSet<DockMaster> DockMasters { get; set; }
        public virtual DbSet<DocumentMaster> DocumentMasters { get; set; }
        public virtual DbSet<EditEntry> EditEntries { get; set; }
        public virtual DbSet<Email_report> Email_report { get; set; }
        public virtual DbSet<EmailNotification> EmailNotifications { get; set; }
        public virtual DbSet<EmailReportDetail> EmailReportDetails { get; set; }
        public virtual DbSet<EstimateStorage> EstimateStorages { get; set; }
        public virtual DbSet<Export> Exports { get; set; }
        public virtual DbSet<ExportCharge> ExportCharges { get; set; }
        public virtual DbSet<ExportDetail> ExportDetails { get; set; }
        public virtual DbSet<FinancialYear> FinancialYears { get; set; }
        public virtual DbSet<HoldDeliveryOrder> HoldDeliveryOrders { get; set; }
        public virtual DbSet<InitiatePayment> InitiatePayments { get; set; }
        public virtual DbSet<InvoiceAddonService> InvoiceAddonServices { get; set; }
        public virtual DbSet<InvoiceLabour> InvoiceLabours { get; set; }
        public virtual DbSet<InvoiceProcess> InvoiceProcesses { get; set; }
        public virtual DbSet<InvoiceStorage> InvoiceStorages { get; set; }
        public virtual DbSet<InvoiceTax> InvoiceTaxes { get; set; }
        public virtual DbSet<InvoiceTaxDetail> InvoiceTaxDetails { get; set; }
        public virtual DbSet<InvoiceType> InvoiceTypes { get; set; }
        public virtual DbSet<Inward> Inwards { get; set; }
        public virtual DbSet<InwardCancelled> InwardCancelleds { get; set; }
        public virtual DbSet<InwardChallan> InwardChallans { get; set; }
        public virtual DbSet<InwardCharge> InwardCharges { get; set; }
        public virtual DbSet<InwardDetail> InwardDetails { get; set; }
        public virtual DbSet<InwardLocation> InwardLocations { get; set; }
        public virtual DbSet<InwardNotification> InwardNotifications { get; set; }
        public virtual DbSet<InwardTrasport> InwardTrasports { get; set; }
        public virtual DbSet<Item> Items { get; set; }
        public virtual DbSet<ItemTypeMaster> ItemTypeMasters { get; set; }
        public virtual DbSet<LabourContractor> LabourContractors { get; set; }
        public virtual DbSet<LotStock> LotStocks { get; set; }
        public virtual DbSet<MaxNumber> MaxNumbers { get; set; }
        public virtual DbSet<MessageApp> MessageApps { get; set; }
        public virtual DbSet<MessageEmail> MessageEmails { get; set; }
        public virtual DbSet<MessageSM> MessageSMS { get; set; }
        public virtual DbSet<MessageTemplate> MessageTemplates { get; set; }
        public virtual DbSet<MessageWeb> MessageWebs { get; set; }
        public virtual DbSet<OutWard> OutWards { get; set; }
        public virtual DbSet<OutwardCancelled> OutwardCancelleds { get; set; }
        public virtual DbSet<OutwardCharge> OutwardCharges { get; set; }
        public virtual DbSet<OutwardDetail> OutwardDetails { get; set; }
        public virtual DbSet<PackingType> PackingTypes { get; set; }
        public virtual DbSet<PageSize> PageSizes { get; set; }
        public virtual DbSet<Pallet> Pallets { get; set; }
        public virtual DbSet<PaymentMode> PaymentModes { get; set; }
        public virtual DbSet<PaymentStatusMaster> PaymentStatusMasters { get; set; }
        public virtual DbSet<Pellet> Pellets { get; set; }
        public virtual DbSet<PeriodType> PeriodTypes { get; set; }
        public virtual DbSet<PlugIn> PlugIns { get; set; }
        public virtual DbSet<Process> Processes { get; set; }
        public virtual DbSet<ProcessService> ProcessServices { get; set; }
        public virtual DbSet<ProductGroup> ProductGroups { get; set; }
        public virtual DbSet<ProductMaster> ProductMasters { get; set; }
        public virtual DbSet<ProductTaxCategory> ProductTaxCategories { get; set; }
        public virtual DbSet<ProductTaxDetail> ProductTaxDetails { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
        public virtual DbSet<RateList> RateLists { get; set; }
        public virtual DbSet<Rate> Rates { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<ReceiptDetail> ReceiptDetails { get; set; }
        public virtual DbSet<ReceiptInvoiceDetail> ReceiptInvoiceDetails { get; set; }
        public virtual DbSet<ReceiptReco> ReceiptRecoes { get; set; }
        public virtual DbSet<ReceiptTypeMaster> ReceiptTypeMasters { get; set; }
        public virtual DbSet<Remark> Remarks { get; set; }
        public virtual DbSet<Repacking> Repackings { get; set; }
        public virtual DbSet<RepackingCharge> RepackingCharges { get; set; }
        public virtual DbSet<RepackingDetail> RepackingDetails { get; set; }
        public virtual DbSet<ReportCopy> ReportCopies { get; set; }
        public virtual DbSet<ReportDesigner> ReportDesigners { get; set; }
        public virtual DbSet<ReportDesigner_Updated> ReportDesigner_Updated { get; set; }
        public virtual DbSet<Report> Reports { get; set; }
        public virtual DbSet<RichText> RichTexts { get; set; }
        public virtual DbSet<RoleReport> RoleReports { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<RoleUI> RoleUIs { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<ServiceTypeMaster> ServiceTypeMasters { get; set; }
        public virtual DbSet<ServiveCharge> ServiveCharges { get; set; }
        public virtual DbSet<Shifting> Shiftings { get; set; }
        public virtual DbSet<ShiftingCancelled> ShiftingCancelleds { get; set; }
        public virtual DbSet<ShiftingCharge> ShiftingCharges { get; set; }
        public virtual DbSet<ShiftingDetail> ShiftingDetails { get; set; }
        public virtual DbSet<SMSNotification> SMSNotifications { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<StatusMaster> StatusMasters { get; set; }
        public virtual DbSet<StockChecking> StockCheckings { get; set; }
        public virtual DbSet<StockCheckingDetail> StockCheckingDetails { get; set; }
        public virtual DbSet<StockRegister> StockRegisters { get; set; }
        public virtual DbSet<StopDeliveryOrder> StopDeliveryOrders { get; set; }
        public virtual DbSet<StorageAreaItem> StorageAreaItems { get; set; }
        public virtual DbSet<StorageAreaMaster> StorageAreaMasters { get; set; }
        public virtual DbSet<StorageArea> StorageAreas { get; set; }
        public virtual DbSet<StorageAreaType> StorageAreaTypes { get; set; }
        public virtual DbSet<StorageOccupancy> StorageOccupancies { get; set; }
        public virtual DbSet<StorageTransaction> StorageTransactions { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<syssetup> syssetups { get; set; }
        public virtual DbSet<TaxMaster> TaxMasters { get; set; }
        public virtual DbSet<TemperatureCategory> TemperatureCategories { get; set; }
        public virtual DbSet<Them> Thems { get; set; }
        public virtual DbSet<Transfer> Transfers { get; set; }
        public virtual DbSet<TransferCancelled> TransferCancelleds { get; set; }
        public virtual DbSet<TransferCharge> TransferCharges { get; set; }
        public virtual DbSet<TransferDetail> TransferDetails { get; set; }
        public virtual DbSet<UIGroup> UIGroups { get; set; }
        public virtual DbSet<UIMaster> UIMasters { get; set; }
        public virtual DbSet<UOM> UOMs { get; set; }
        public virtual DbSet<Update_Outward> Update_Outward { get; set; }
        public virtual DbSet<UserCompany> UserCompanies { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<UserType> UserTypes { get; set; }
        public virtual DbSet<Warehouse> WareHouses { get; set; }
        public virtual DbSet<C_StockRegister> C_StockRegister { get; set; }
        public virtual DbSet<Calendar> Calendars { get; set; }
        public virtual DbSet<CustomerRateList_New> CustomerRateList_New { get; set; }
        public virtual DbSet<Exception> Exceptions { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Reports1> Reports1 { get; set; }
        public virtual DbSet<TaxDetail> TaxDetails { get; set; }
        public virtual DbSet<Tax> Taxes { get; set; }
        public virtual DbSet<TaxType> TaxTypes { get; set; }
        public virtual DbSet<testingtable> testingtables { get; set; }
        public virtual DbSet<CompanyMaster_Select> CompanyMaster_Select { get; set; }
        public virtual DbSet<Customer_view> Customer_view { get; set; }
        public virtual DbSet<Departments_view> Departments_view { get; set; }
        public virtual DbSet<Designation_view> Designation_view { get; set; }
        public virtual DbSet<GetCompanyName> GetCompanyNames { get; set; }
        public virtual DbSet<GetParentCompany> GetParentCompanies { get; set; }
        public virtual DbSet<Items_view> Items_view { get; set; }
        public virtual DbSet<PackingType_View> PackingType_View { get; set; }
        public virtual DbSet<ParentStorageList> ParentStorageLists { get; set; }
        public virtual DbSet<ProductMasters_view> ProductMasters_view { get; set; }
        public virtual DbSet<ProductTaxCategory_View> ProductTaxCategory_View { get; set; }
        public virtual DbSet<Rate_view> Rate_view { get; set; }
        public virtual DbSet<Service_view> Service_view { get; set; }
        public virtual DbSet<ServicesView_Select> ServicesView_Select { get; set; }
        public virtual DbSet<ServiceTypeMaster_View> ServiceTypeMaster_View { get; set; }
        public virtual DbSet<StorageAreaType_View> StorageAreaType_View { get; set; }
        public virtual DbSet<Taxes_view> Taxes_view { get; set; }
        public virtual DbSet<Users_View> Users_View { get; set; }
        public virtual DbSet<View_PaymentModes> View_PaymentModes { get; set; }
        public virtual DbSet<Warehouse_Select> Warehouse_Select { get; set; }
        public virtual DbSet<Warehouse_view> Warehouse_view { get; set; }
    
        [DbFunction("WMS_Entities", "fnGetStockDaywise")]
        public virtual IQueryable<fnGetStockDaywise_Result> fnGetStockDaywise(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetStockDaywise_Result>("[WMS_Entities].[fnGetStockDaywise](@WarehouseID, @FromDate, @ToDate)", warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("WMS_Entities", "fnGetStorageAreaOccupancy")]
        public virtual IQueryable<fnGetStorageAreaOccupancy_Result> fnGetStorageAreaOccupancy(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetStorageAreaOccupancy_Result>("[WMS_Entities].[fnGetStorageAreaOccupancy](@WarehouseID, @FromDate, @ToDate)", warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        [DbFunction("WMS_Entities", "fnGetStorageAreaOccupancy_Customer")]
        public virtual IQueryable<fnGetStorageAreaOccupancy_Customer_Result> fnGetStorageAreaOccupancy_Customer(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetStorageAreaOccupancy_Customer_Result>("[WMS_Entities].[fnGetStorageAreaOccupancy_Customer](@WarehouseID, @FromDate, @ToDate, @CustomerID)", warehouseIDParameter, fromDateParameter, toDateParameter, customerIDParameter);
        }
    
        [DbFunction("WMS_Entities", "fnGetWeekdates")]
        public virtual IQueryable<fnGetWeekdates_Result> fnGetWeekdates(Nullable<System.DateTime> fDate, Nullable<System.DateTime> tDate)
        {
            var fDateParameter = fDate.HasValue ?
                new ObjectParameter("fDate", fDate) :
                new ObjectParameter("fDate", typeof(System.DateTime));
    
            var tDateParameter = tDate.HasValue ?
                new ObjectParameter("tDate", tDate) :
                new ObjectParameter("tDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnGetWeekdates_Result>("[WMS_Entities].[fnGetWeekdates](@fDate, @tDate)", fDateParameter, tDateParameter);
        }
    
        [DbFunction("WMS_Entities", "fnSplitString")]
        public virtual IQueryable<fnSplitString_Result> fnSplitString(string array)
        {
            var arrayParameter = array != null ?
                new ObjectParameter("Array", array) :
                new ObjectParameter("Array", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fnSplitString_Result>("[WMS_Entities].[fnSplitString](@Array)", arrayParameter);
        }
    
        public virtual int f_ContractDetail_Insert_Update(string xml, Nullable<int> createdBy, Nullable<int> warehouseID, Nullable<int> companyID, string mode)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_ContractDetail_Insert_Update", xmlParameter, createdByParameter, warehouseIDParameter, companyIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<f_GetCustomer_Result> f_GetCustomer(string cname)
        {
            var cnameParameter = cname != null ?
                new ObjectParameter("Cname", cname) :
                new ObjectParameter("Cname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetCustomer_Result>("f_GetCustomer", cnameParameter);
        }
    
        public virtual ObjectResult<f_GetProductItem_Result> f_GetProductItem()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_GetProductItem_Result>("f_GetProductItem");
        }
    
        public virtual int f_InwardDetail_Insert_Update(string xml, Nullable<int> createdBy, Nullable<int> warehouseID, Nullable<int> companyID, string mode)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_InwardDetail_Insert_Update", xmlParameter, createdByParameter, warehouseIDParameter, companyIDParameter, modeParameter);
        }
    
        public virtual int f_Process_Insert_Update(string xml, Nullable<int> createdBy, Nullable<int> warehouseID, Nullable<int> companyID, string mode)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Process_Insert_Update", xmlParameter, createdByParameter, warehouseIDParameter, companyIDParameter, modeParameter);
        }
    
        public virtual int f_Rep_BillPrint_Storage(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Rep_BillPrint_Storage", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int f_Services_Insert_Update(string xml, Nullable<int> createdBy, Nullable<int> warehouseID, Nullable<int> companyID, string mode)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_Services_Insert_Update", xmlParameter, createdByParameter, warehouseIDParameter, companyIDParameter, modeParameter);
        }
    
        public virtual int f_StorageAreaMaster_Insert_Update(string xml, Nullable<int> createdBy, Nullable<int> warehouseID, Nullable<int> companyID, string mode)
        {
            var xmlParameter = xml != null ?
                new ObjectParameter("xml", xml) :
                new ObjectParameter("xml", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("f_StorageAreaMaster_Insert_Update", xmlParameter, createdByParameter, warehouseIDParameter, companyIDParameter, modeParameter);
        }
    
        public virtual ObjectResult<f_testingCustomers_Result> f_testingCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<f_testingCustomers_Result>("f_testingCustomers");
        }
    
        public virtual ObjectResult<string> f_Warehouse_Insert_Update(Nullable<int> warehouseID, Nullable<int> companyID, string warehouseName, string warehouseCode, string address1, string address2, string address3, Nullable<int> cityId, byte[] logo, Nullable<int> createdby)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseNameParameter = warehouseName != null ?
                new ObjectParameter("WarehouseName", warehouseName) :
                new ObjectParameter("WarehouseName", typeof(string));
    
            var warehouseCodeParameter = warehouseCode != null ?
                new ObjectParameter("WarehouseCode", warehouseCode) :
                new ObjectParameter("WarehouseCode", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("f_Warehouse_Insert_Update", warehouseIDParameter, companyIDParameter, warehouseNameParameter, warehouseCodeParameter, address1Parameter, address2Parameter, address3Parameter, cityIdParameter, logoParameter, createdbyParameter);
        }
    
        public virtual int AdditionalServices_Insert(Nullable<int> additionalServiceID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<System.DateTime> billDate, string billNumber, Nullable<bool> addonMonthlyBill, string remarks, Nullable<int> createdBy, string mode)
        {
            var additionalServiceIDParameter = additionalServiceID.HasValue ?
                new ObjectParameter("AdditionalServiceID", additionalServiceID) :
                new ObjectParameter("AdditionalServiceID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billNumberParameter = billNumber != null ?
                new ObjectParameter("BillNumber", billNumber) :
                new ObjectParameter("BillNumber", typeof(string));
    
            var addonMonthlyBillParameter = addonMonthlyBill.HasValue ?
                new ObjectParameter("AddonMonthlyBill", addonMonthlyBill) :
                new ObjectParameter("AddonMonthlyBill", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AdditionalServices_Insert", additionalServiceIDParameter, warehouseIDParameter, customerIDParameter, billDateParameter, billNumberParameter, addonMonthlyBillParameter, remarksParameter, createdByParameter, modeParameter);
        }
    
        public virtual ObjectResult<AdditionalServicesList_Result> AdditionalServicesList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<AdditionalServicesList_Result>("AdditionalServicesList");
        }
    
        public virtual ObjectResult<api_BillDetailLabour_Result> api_BillDetailLabour(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> invoiceNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_BillDetailLabour_Result>("api_BillDetailLabour", customerIDParameter, warehouseIDParameter, invoiceNoParameter);
        }
    
        public virtual ObjectResult<api_BillDetailStorage_Result> api_BillDetailStorage(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> invoiceNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            var invoiceNoParameter = invoiceNo.HasValue ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_BillDetailStorage_Result>("api_BillDetailStorage", customerIDParameter, warehouseIDParameter, invoiceNoParameter);
        }
    
        public virtual ObjectResult<api_containerwisebill_Result> api_containerwisebill(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("fromdate", fromdate) :
                new ObjectParameter("fromdate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("toDate", toDate) :
                new ObjectParameter("toDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_containerwisebill_Result>("api_containerwisebill", customerIDParameter, warehouseIDParameter, fromdateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_DateRetrive_Result> api_DateRetrive()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_DateRetrive_Result>("api_DateRetrive");
        }
    
        public virtual ObjectResult<api_DeliveryOrderDetails_Result> api_DeliveryOrderDetails(Nullable<int> deliveryOrderID, Nullable<int> wareHouseID)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_DeliveryOrderDetails_Result>("api_DeliveryOrderDetails", deliveryOrderIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<api_DeliveryOrderList_Result> api_DeliveryOrderList(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_DeliveryOrderList_Result>("api_DeliveryOrderList", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<api_DeliveryOrderRegister_Result> api_DeliveryOrderRegister(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_DeliveryOrderRegister_Result>("api_DeliveryOrderRegister", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_DeliveryOrderSearch_Result> api_DeliveryOrderSearch(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_DeliveryOrderSearch_Result>("api_DeliveryOrderSearch", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<api_GetCustomerParty_Result> api_GetCustomerParty(string partyName)
        {
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_GetCustomerParty_Result>("api_GetCustomerParty", partyNameParameter);
        }
    
        public virtual ObjectResult<api_GetDashBoardData_Result> api_GetDashBoardData(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> date)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("date", date) :
                new ObjectParameter("date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_GetDashBoardData_Result>("api_GetDashBoardData", customerIDParameter, wareHouseIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<api_InwardRegister_Result> api_InwardRegister(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_InwardRegister_Result>("api_InwardRegister", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_Inword_Result> api_Inword(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_Inword_Result>("api_Inword", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_LotSearch_Result> api_LotSearch(Nullable<int> customerID, Nullable<int> wareHouseID, string lotNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_LotSearch_Result>("api_LotSearch", customerIDParameter, wareHouseIDParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<api_OutWardRegister_Result> api_OutWardRegister(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_OutWardRegister_Result>("api_OutWardRegister", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_outword_Result> api_outword(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_outword_Result>("api_outword", customerIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_PendingDO_Result> api_PendingDO(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_PendingDO_Result>("api_PendingDO", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<api_StockChart_Result> api_StockChart(Nullable<int> customerId, Nullable<int> warehouseID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_StockChart_Result>("api_StockChart", customerIdParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<api_StockDetails_Result> api_StockDetails(Nullable<int> customerId, Nullable<int> wareHouseID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_StockDetails_Result>("api_StockDetails", customerIdParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<api_StockSummary_Result> api_StockSummary(Nullable<int> customerId, Nullable<int> wareHouseID)
        {
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_StockSummary_Result>("api_StockSummary", customerIdParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> api_StopDeliveryOrder_Validation(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("api_StopDeliveryOrder_Validation", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<api_Transfer_Result> api_Transfer(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<api_Transfer_Result>("api_Transfer", customerIDParameter, wareHouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<string> BankAccountDetail_insert(Nullable<int> bankAccountID, Nullable<int> warehouseID, Nullable<int> labourContractorID, string bankName, string branch, string accountNo, string iFSCCode, Nullable<int> createdBy)
        {
            var bankAccountIDParameter = bankAccountID.HasValue ?
                new ObjectParameter("BankAccountID", bankAccountID) :
                new ObjectParameter("BankAccountID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var labourContractorIDParameter = labourContractorID.HasValue ?
                new ObjectParameter("LabourContractorID", labourContractorID) :
                new ObjectParameter("LabourContractorID", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BankAccountDetail_insert", bankAccountIDParameter, warehouseIDParameter, labourContractorIDParameter, bankNameParameter, branchParameter, accountNoParameter, iFSCCodeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<BankAccountDetail_Select_Result> BankAccountDetail_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BankAccountDetail_Select_Result>("BankAccountDetail_Select");
        }
    
        public virtual ObjectResult<BillDetails_Result> BillDetails(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillDetails_Result>("BillDetails", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<BillDetails_Labour_Result> BillDetails_Labour(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillDetails_Labour_Result>("BillDetails_Labour", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<string> BillingCycle_Insert_Update(Nullable<int> billingCycleID, string billingCycleCode, string billingCycleName, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<int> modifyBy)
        {
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var billingCycleCodeParameter = billingCycleCode != null ?
                new ObjectParameter("BillingCycleCode", billingCycleCode) :
                new ObjectParameter("BillingCycleCode", typeof(string));
    
            var billingCycleNameParameter = billingCycleName != null ?
                new ObjectParameter("BillingCycleName", billingCycleName) :
                new ObjectParameter("BillingCycleName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modifyByParameter = modifyBy.HasValue ?
                new ObjectParameter("ModifyBy", modifyBy) :
                new ObjectParameter("ModifyBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("BillingCycle_Insert_Update", billingCycleIDParameter, billingCycleCodeParameter, billingCycleNameParameter, isActiveParameter, createdByParameter, modifyByParameter);
        }
    
        public virtual ObjectResult<BillingCycle_Select_Result> BillingCycle_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillingCycle_Select_Result>("BillingCycle_Select");
        }
    
        public virtual ObjectResult<BillProcess_List_Result> BillProcess_List(Nullable<int> warehouseId)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillProcess_List_Result>("BillProcess_List", warehouseIdParameter);
        }
    
        public virtual ObjectResult<BillReprocess_List_Result> BillReprocess_List(Nullable<int> warehouseId)
        {
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillReprocess_List_Result>("BillReprocess_List", warehouseIdParameter);
        }
    
        public virtual ObjectResult<BillSummary_Result> BillSummary(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillSummary_Result>("BillSummary", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual int BillVerification_insert(Nullable<bool> isOK, Nullable<int> verifiedBy, string verifiedRemarks)
        {
            var isOKParameter = isOK.HasValue ?
                new ObjectParameter("IsOK", isOK) :
                new ObjectParameter("IsOK", typeof(bool));
    
            var verifiedByParameter = verifiedBy.HasValue ?
                new ObjectParameter("VerifiedBy", verifiedBy) :
                new ObjectParameter("VerifiedBy", typeof(int));
    
            var verifiedRemarksParameter = verifiedRemarks != null ?
                new ObjectParameter("VerifiedRemarks", verifiedRemarks) :
                new ObjectParameter("VerifiedRemarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("BillVerification_insert", isOKParameter, verifiedByParameter, verifiedRemarksParameter);
        }
    
        public virtual ObjectResult<BillVerification_List_Result> BillVerification_List(Nullable<System.DateTime> invoiceDate, Nullable<int> invoiceType, Nullable<int> warehouseID)
        {
            var invoiceDateParameter = invoiceDate.HasValue ?
                new ObjectParameter("InvoiceDate", invoiceDate) :
                new ObjectParameter("InvoiceDate", typeof(System.DateTime));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<BillVerification_List_Result>("BillVerification_List", invoiceDateParameter, invoiceTypeParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<Block_Select_Result> Block_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Block_Select_Result>("Block_Select");
        }
    
        public virtual int Booking_Insert(Nullable<int> bookingID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<System.DateTime> bookingDate, Nullable<System.DateTime> arrivalDate, string bookingBy, string remarks, Nullable<int> createdBy)
        {
            var bookingIDParameter = bookingID.HasValue ?
                new ObjectParameter("BookingID", bookingID) :
                new ObjectParameter("BookingID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var bookingDateParameter = bookingDate.HasValue ?
                new ObjectParameter("BookingDate", bookingDate) :
                new ObjectParameter("BookingDate", typeof(System.DateTime));
    
            var arrivalDateParameter = arrivalDate.HasValue ?
                new ObjectParameter("ArrivalDate", arrivalDate) :
                new ObjectParameter("ArrivalDate", typeof(System.DateTime));
    
            var bookingByParameter = bookingBy != null ?
                new ObjectParameter("BookingBy", bookingBy) :
                new ObjectParameter("BookingBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Booking_Insert", bookingIDParameter, warehouseIDParameter, customerIDParameter, bookingDateParameter, arrivalDateParameter, bookingByParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Booking_Select_Result> Booking_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Booking_Select_Result>("Booking_Select");
        }
    
        public virtual ObjectResult<string> Brand_Insert_Update(Nullable<int> brandID, string brandName, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            var brandNameParameter = brandName != null ?
                new ObjectParameter("BrandName", brandName) :
                new ObjectParameter("BrandName", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Brand_Insert_Update", brandIDParameter, brandNameParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Brand_Select_Result> Brand_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Brand_Select_Result>("Brand_Select");
        }
    
        public virtual int Challan_Insert(Nullable<int> challanID, Nullable<System.DateTime> challanDate, Nullable<int> customerID, Nullable<int> docID, Nullable<int> unLoadingBy, Nullable<int> wareHouseID, string personName, string remarks, Nullable<int> createdBy, string transporterName, string truckNo, string containerNo)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            var challanDateParameter = challanDate.HasValue ?
                new ObjectParameter("ChallanDate", challanDate) :
                new ObjectParameter("ChallanDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var unLoadingByParameter = unLoadingBy.HasValue ?
                new ObjectParameter("UnLoadingBy", unLoadingBy) :
                new ObjectParameter("UnLoadingBy", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var transporterNameParameter = transporterName != null ?
                new ObjectParameter("TransporterName", transporterName) :
                new ObjectParameter("TransporterName", typeof(string));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Challan_Insert", challanIDParameter, challanDateParameter, customerIDParameter, docIDParameter, unLoadingByParameter, wareHouseIDParameter, personNameParameter, remarksParameter, createdByParameter, transporterNameParameter, truckNoParameter, containerNoParameter);
        }
    
        public virtual ObjectResult<Challan_Select_Result> Challan_Select(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Challan_Select_Result>("Challan_Select", warehouseIDParameter);
        }
    
        public virtual int CheckListDetail_Insert(Nullable<int> checkListDetailID)
        {
            var checkListDetailIDParameter = checkListDetailID.HasValue ?
                new ObjectParameter("CheckListDetailID", checkListDetailID) :
                new ObjectParameter("CheckListDetailID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CheckListDetail_Insert", checkListDetailIDParameter);
        }
    
        public virtual ObjectResult<CheckListDetail_List_Result> CheckListDetail_List(Nullable<int> periodType)
        {
            var periodTypeParameter = periodType.HasValue ?
                new ObjectParameter("PeriodType", periodType) :
                new ObjectParameter("PeriodType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckListDetail_List_Result>("CheckListDetail_List", periodTypeParameter);
        }
    
        public virtual ObjectResult<string> CheckListMaster_Insert(Nullable<int> checkListID, string checkListName, string description, Nullable<int> periodTypeID, Nullable<int> frequancy, Nullable<bool> isOptional, Nullable<bool> optionYesNo, Nullable<int> createdBy)
        {
            var checkListIDParameter = checkListID.HasValue ?
                new ObjectParameter("CheckListID", checkListID) :
                new ObjectParameter("CheckListID", typeof(int));
    
            var checkListNameParameter = checkListName != null ?
                new ObjectParameter("CheckListName", checkListName) :
                new ObjectParameter("CheckListName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var periodTypeIDParameter = periodTypeID.HasValue ?
                new ObjectParameter("PeriodTypeID", periodTypeID) :
                new ObjectParameter("PeriodTypeID", typeof(int));
    
            var frequancyParameter = frequancy.HasValue ?
                new ObjectParameter("Frequancy", frequancy) :
                new ObjectParameter("Frequancy", typeof(int));
    
            var isOptionalParameter = isOptional.HasValue ?
                new ObjectParameter("IsOptional", isOptional) :
                new ObjectParameter("IsOptional", typeof(bool));
    
            var optionYesNoParameter = optionYesNo.HasValue ?
                new ObjectParameter("OptionYesNo", optionYesNo) :
                new ObjectParameter("OptionYesNo", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CheckListMaster_Insert", checkListIDParameter, checkListNameParameter, descriptionParameter, periodTypeIDParameter, frequancyParameter, isOptionalParameter, optionYesNoParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CheckListMaster_List_Result> CheckListMaster_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CheckListMaster_List_Result>("CheckListMaster_List");
        }
    
        public virtual ObjectResult<string> Cities_Insert(Nullable<int> cityID, string city, Nullable<int> stateID, Nullable<int> createdBy)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var cityParameter = city != null ?
                new ObjectParameter("City", city) :
                new ObjectParameter("City", typeof(string));
    
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Cities_Insert", cityIDParameter, cityParameter, stateIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Cities_Select_Result> Cities_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Cities_Select_Result>("Cities_Select");
        }
    
        public virtual ObjectResult<string> Company_Insert_Update(Nullable<int> companyID, string companyname, string companyCode, string address1, string address2, string address3, Nullable<int> cityId, string pincode, string contactNo, string mobileNo, string gstno, string panno, Nullable<int> parentCompanyId, Nullable<int> createdby)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var companynameParameter = companyname != null ?
                new ObjectParameter("Companyname", companyname) :
                new ObjectParameter("Companyname", typeof(string));
    
            var companyCodeParameter = companyCode != null ?
                new ObjectParameter("CompanyCode", companyCode) :
                new ObjectParameter("CompanyCode", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var pincodeParameter = pincode != null ?
                new ObjectParameter("Pincode", pincode) :
                new ObjectParameter("Pincode", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var gstnoParameter = gstno != null ?
                new ObjectParameter("Gstno", gstno) :
                new ObjectParameter("Gstno", typeof(string));
    
            var pannoParameter = panno != null ?
                new ObjectParameter("Panno", panno) :
                new ObjectParameter("Panno", typeof(string));
    
            var parentCompanyIdParameter = parentCompanyId.HasValue ?
                new ObjectParameter("ParentCompanyId", parentCompanyId) :
                new ObjectParameter("ParentCompanyId", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Company_Insert_Update", companyIDParameter, companynameParameter, companyCodeParameter, address1Parameter, address2Parameter, address3Parameter, cityIdParameter, pincodeParameter, contactNoParameter, mobileNoParameter, gstnoParameter, pannoParameter, parentCompanyIdParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<Company_Select_Result> Company_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Company_Select_Result>("Company_Select");
        }
    
        public virtual ObjectResult<string> CountMaster_Insert_Update(Nullable<int> countID, string counts, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var countIDParameter = countID.HasValue ?
                new ObjectParameter("CountID", countID) :
                new ObjectParameter("CountID", typeof(int));
    
            var countsParameter = counts != null ?
                new ObjectParameter("Counts", counts) :
                new ObjectParameter("Counts", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CountMaster_Insert_Update", countIDParameter, countsParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CountMaster_Select_Result> CountMaster_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CountMaster_Select_Result>("CountMaster_Select");
        }
    
        public virtual ObjectResult<CurrentStockOfCustomer_Result> CurrentStockOfCustomer(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CurrentStockOfCustomer_Result>("CurrentStockOfCustomer", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<string> Customer_Cancelled(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Customer_Cancelled", customerIDParameter);
        }
    
        public virtual ObjectResult<string> Customer_CreditNote(Nullable<int> creditNoteID, string creditNoteNo, Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<decimal> creditAmount, Nullable<System.DateTime> validTo, Nullable<int> inVoiceID, Nullable<bool> isOneTimeUse, string remarks, Nullable<int> createdBy)
        {
            var creditNoteIDParameter = creditNoteID.HasValue ?
                new ObjectParameter("CreditNoteID", creditNoteID) :
                new ObjectParameter("CreditNoteID", typeof(int));
    
            var creditNoteNoParameter = creditNoteNo != null ?
                new ObjectParameter("CreditNoteNo", creditNoteNo) :
                new ObjectParameter("CreditNoteNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var inVoiceIDParameter = inVoiceID.HasValue ?
                new ObjectParameter("InVoiceID", inVoiceID) :
                new ObjectParameter("InVoiceID", typeof(int));
    
            var isOneTimeUseParameter = isOneTimeUse.HasValue ?
                new ObjectParameter("IsOneTimeUse", isOneTimeUse) :
                new ObjectParameter("IsOneTimeUse", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Customer_CreditNote", creditNoteIDParameter, creditNoteNoParameter, customerIDParameter, wareHouseIDParameter, creditAmountParameter, validToParameter, inVoiceIDParameter, isOneTimeUseParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> Customer_CreditNote_InsertUpdate(string mode, string creditNoteNo, Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<decimal> creditAmount, Nullable<System.DateTime> validTo, Nullable<int> inVoiceID, Nullable<bool> isOneTimeUse, string remarks, Nullable<int> createdBy, Nullable<decimal> balanceAmount, Nullable<decimal> usedAmount)
        {
            var modeParameter = mode != null ?
                new ObjectParameter("mode", mode) :
                new ObjectParameter("mode", typeof(string));
    
            var creditNoteNoParameter = creditNoteNo != null ?
                new ObjectParameter("CreditNoteNo", creditNoteNo) :
                new ObjectParameter("CreditNoteNo", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var creditAmountParameter = creditAmount.HasValue ?
                new ObjectParameter("CreditAmount", creditAmount) :
                new ObjectParameter("CreditAmount", typeof(decimal));
    
            var validToParameter = validTo.HasValue ?
                new ObjectParameter("ValidTo", validTo) :
                new ObjectParameter("ValidTo", typeof(System.DateTime));
    
            var inVoiceIDParameter = inVoiceID.HasValue ?
                new ObjectParameter("InVoiceID", inVoiceID) :
                new ObjectParameter("InVoiceID", typeof(int));
    
            var isOneTimeUseParameter = isOneTimeUse.HasValue ?
                new ObjectParameter("IsOneTimeUse", isOneTimeUse) :
                new ObjectParameter("IsOneTimeUse", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var balanceAmountParameter = balanceAmount.HasValue ?
                new ObjectParameter("BalanceAmount", balanceAmount) :
                new ObjectParameter("BalanceAmount", typeof(decimal));
    
            var usedAmountParameter = usedAmount.HasValue ?
                new ObjectParameter("UsedAmount", usedAmount) :
                new ObjectParameter("UsedAmount", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Customer_CreditNote_InsertUpdate", modeParameter, creditNoteNoParameter, customerIDParameter, wareHouseIDParameter, creditAmountParameter, validToParameter, inVoiceIDParameter, isOneTimeUseParameter, remarksParameter, createdByParameter, balanceAmountParameter, usedAmountParameter);
        }
    
        public virtual ObjectResult<Customer_Login_Result> Customer_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer_Login_Result>("Customer_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<Customer_Select_Result> Customer_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customer_Select_Result>("Customer_Select");
        }
    
        public virtual ObjectResult<string> CustomerActivation_Insert(Nullable<int> activationID, Nullable<int> customerID, string sRNo, string key)
        {
            var activationIDParameter = activationID.HasValue ?
                new ObjectParameter("ActivationID", activationID) :
                new ObjectParameter("ActivationID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var sRNoParameter = sRNo != null ?
                new ObjectParameter("SRNo", sRNo) :
                new ObjectParameter("SRNo", typeof(string));
    
            var keyParameter = key != null ?
                new ObjectParameter("Key", key) :
                new ObjectParameter("Key", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerActivation_Insert", activationIDParameter, customerIDParameter, sRNoParameter, keyParameter);
        }
    
        public virtual ObjectResult<CustomerActivation_Select_Result> CustomerActivation_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerActivation_Select_Result>("CustomerActivation_Select");
        }
    
        public virtual ObjectResult<string> CustomerAddOnService_insert(Nullable<int> addOnServiceID, Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> serviceID, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> rate, Nullable<int> billingCycleID, Nullable<int> createdBy)
        {
            var addOnServiceIDParameter = addOnServiceID.HasValue ?
                new ObjectParameter("AddOnServiceID", addOnServiceID) :
                new ObjectParameter("AddOnServiceID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerAddOnService_insert", addOnServiceIDParameter, customerIDParameter, warehouseIDParameter, serviceIDParameter, startDateParameter, endDateParameter, rateParameter, billingCycleIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerAddOnServices_List_Result> CustomerAddOnServices_List(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerAddOnServices_List_Result>("CustomerAddOnServices_List", customerIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerCart_Insert(Nullable<int> customerCartID, Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> inwardLocationID, string lotNo, Nullable<decimal> cartQuantity, Nullable<int> createdBy)
        {
            var customerCartIDParameter = customerCartID.HasValue ?
                new ObjectParameter("CustomerCartID", customerCartID) :
                new ObjectParameter("CustomerCartID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var inwardLocationIDParameter = inwardLocationID.HasValue ?
                new ObjectParameter("InwardLocationID", inwardLocationID) :
                new ObjectParameter("InwardLocationID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var cartQuantityParameter = cartQuantity.HasValue ?
                new ObjectParameter("CartQuantity", cartQuantity) :
                new ObjectParameter("CartQuantity", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerCart_Insert", customerCartIDParameter, customerIDParameter, warehouseIDParameter, inwardLocationIDParameter, lotNoParameter, cartQuantityParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> CustomerCart_Remove(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> inwardLocationID, string lotNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var inwardLocationIDParameter = inwardLocationID.HasValue ?
                new ObjectParameter("InwardLocationID", inwardLocationID) :
                new ObjectParameter("InwardLocationID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerCart_Remove", customerIDParameter, warehouseIDParameter, inwardLocationIDParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<CustomerCart_select_Result> CustomerCart_select(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> createdBy)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCart_select_Result>("CustomerCart_select", customerIDParameter, warehouseIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerContact_Select_Result> CustomerContact_Select(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerContact_Select_Result>("CustomerContact_Select", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerContacts_list_Result> CustomerContacts_list(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerContacts_list_Result>("CustomerContacts_list", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerContract_Expiry_Result> CustomerContract_Expiry(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerContract_Expiry_Result>("CustomerContract_Expiry", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual int Customercontract_Insert(Nullable<int> customerRateListID, Nullable<int> customerID, Nullable<System.DateTime> wefDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> rateID, Nullable<int> billingCycleID, Nullable<int> createdBy, Nullable<int> companyID)
        {
            var customerRateListIDParameter = customerRateListID.HasValue ?
                new ObjectParameter("CustomerRateListID", customerRateListID) :
                new ObjectParameter("CustomerRateListID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wefDateParameter = wefDate.HasValue ?
                new ObjectParameter("wefDate", wefDate) :
                new ObjectParameter("wefDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Customercontract_Insert", customerRateListIDParameter, customerIDParameter, wefDateParameter, fromDateParameter, endDateParameter, rateIDParameter, billingCycleIDParameter, createdByParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<CustomerContractWarehouse_List_Result> CustomerContractWarehouse_List(Nullable<int> customerRateID, string mode, Nullable<int> wareHouseID)
        {
            var customerRateIDParameter = customerRateID.HasValue ?
                new ObjectParameter("CustomerRateID", customerRateID) :
                new ObjectParameter("CustomerRateID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerContractWarehouse_List_Result>("CustomerContractWarehouse_List", customerRateIDParameter, modeParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerCreditNote_Select_Result> CustomerCreditNote_Select(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerCreditNote_Select_Result>("CustomerCreditNote_Select", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerDocument_Select_Result> CustomerDocument_Select(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerDocument_Select_Result>("CustomerDocument_Select", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerInwardData_Result> CustomerInwardData(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerInwardData_Result>("CustomerInwardData", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerLastLogin_Details(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerLastLogin_Details", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<string> customerlimit_insert(Nullable<int> customerLimitID, Nullable<int> customerID, Nullable<int> warehouseID, Nullable<decimal> limitAmount, Nullable<int> createdBy)
        {
            var customerLimitIDParameter = customerLimitID.HasValue ?
                new ObjectParameter("CustomerLimitID", customerLimitID) :
                new ObjectParameter("CustomerLimitID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var limitAmountParameter = limitAmount.HasValue ?
                new ObjectParameter("LimitAmount", limitAmount) :
                new ObjectParameter("LimitAmount", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("customerlimit_insert", customerLimitIDParameter, customerIDParameter, warehouseIDParameter, limitAmountParameter, createdByParameter);
        }
    
        public virtual ObjectResult<customerlimit_Select_Result> customerlimit_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<customerlimit_Select_Result>("customerlimit_Select");
        }
    
        public virtual ObjectResult<string> CustomerLogIn_insert(Nullable<int> customerLoginID, Nullable<int> customerID, string userName, string password, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var customerLoginIDParameter = customerLoginID.HasValue ?
                new ObjectParameter("CustomerLoginID", customerLoginID) :
                new ObjectParameter("CustomerLoginID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerLogIn_insert", customerLoginIDParameter, customerIDParameter, userNameParameter, passwordParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerLogin_List_Result> CustomerLogin_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerLogin_List_Result>("CustomerLogin_List");
        }
    
        public virtual ObjectResult<string> CustomerLogInHistory_insert(Nullable<int> customerID, Nullable<int> warehouseID, string loginIP, string sessionID, string source)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var loginIPParameter = loginIP != null ?
                new ObjectParameter("LoginIP", loginIP) :
                new ObjectParameter("LoginIP", typeof(string));
    
            var sessionIDParameter = sessionID != null ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(string));
    
            var sourceParameter = source != null ?
                new ObjectParameter("Source", source) :
                new ObjectParameter("Source", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerLogInHistory_insert", customerIDParameter, warehouseIDParameter, loginIPParameter, sessionIDParameter, sourceParameter);
        }
    
        public virtual ObjectResult<CustomerOutwardData_Result> CustomerOutwardData(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerOutwardData_Result>("CustomerOutwardData", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerParties_Insert(Nullable<int> customerPartyID, Nullable<int> customerID, string partyName, string shippingAddress, string shippingAddress1, string pinCode, Nullable<int> createdBy)
        {
            var customerPartyIDParameter = customerPartyID.HasValue ?
                new ObjectParameter("CustomerPartyID", customerPartyID) :
                new ObjectParameter("CustomerPartyID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var partyNameParameter = partyName != null ?
                new ObjectParameter("PartyName", partyName) :
                new ObjectParameter("PartyName", typeof(string));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var shippingAddress1Parameter = shippingAddress1 != null ?
                new ObjectParameter("ShippingAddress1", shippingAddress1) :
                new ObjectParameter("ShippingAddress1", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerParties_Insert", customerPartyIDParameter, customerIDParameter, partyNameParameter, shippingAddressParameter, shippingAddress1Parameter, pinCodeParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerPendingDO_Result> CustomerPendingDO(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerPendingDO_Result>("CustomerPendingDO", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerPendingStock_Result> CustomerPendingStock(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerPendingStock_Result>("CustomerPendingStock", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerProductWiseBalanceStock_Result> CustomerProductWiseBalanceStock(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerProductWiseBalanceStock_Result>("CustomerProductWiseBalanceStock", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual int CustomerRateList_Insert(Nullable<int> customerRateListID, Nullable<int> customerID, Nullable<System.DateTime> wefDate, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> endDate, Nullable<int> rateID, Nullable<int> billingCycleID, Nullable<int> createdBy, Nullable<int> companyID)
        {
            var customerRateListIDParameter = customerRateListID.HasValue ?
                new ObjectParameter("CustomerRateListID", customerRateListID) :
                new ObjectParameter("CustomerRateListID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wefDateParameter = wefDate.HasValue ?
                new ObjectParameter("wefDate", wefDate) :
                new ObjectParameter("wefDate", typeof(System.DateTime));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CustomerRateList_Insert", customerRateListIDParameter, customerIDParameter, wefDateParameter, fromDateParameter, endDateParameter, rateIDParameter, billingCycleIDParameter, createdByParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<CustomerRateList_Select_Result> CustomerRateList_Select(Nullable<int> customerID, Nullable<int> customerRateID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerRateIDParameter = customerRateID.HasValue ?
                new ObjectParameter("CustomerRateID", customerRateID) :
                new ObjectParameter("CustomerRateID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRateList_Select_Result>("CustomerRateList_Select", customerIDParameter, customerRateIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerRateList_Service_Result> CustomerRateList_Service(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRateList_Service_Result>("CustomerRateList_Service", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerRates_List_Result> CustomerRates_List(Nullable<int> customerID, Nullable<int> rateID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRates_List_Result>("CustomerRates_List", customerIDParameter, rateIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerRates_Select_Result> CustomerRates_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerRates_Select_Result>("CustomerRates_Select");
        }
    
        public virtual int Customers_Insert(Nullable<int> customerID, Nullable<int> warehouseID, string initials, string customerName, string customerCode, Nullable<int> customerTypeID, string address1, string address2, string groupName, Nullable<int> cityId, string email, string gstno, string panno, Nullable<int> createdby, Nullable<int> state, string fICINo, Nullable<decimal> storageDiscount, Nullable<decimal> labourDiscount, string referredBy, string pinCode, string gSTStateCode, Nullable<int> rateID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var initialsParameter = initials != null ?
                new ObjectParameter("Initials", initials) :
                new ObjectParameter("Initials", typeof(string));
    
            var customerNameParameter = customerName != null ?
                new ObjectParameter("CustomerName", customerName) :
                new ObjectParameter("CustomerName", typeof(string));
    
            var customerCodeParameter = customerCode != null ?
                new ObjectParameter("CustomerCode", customerCode) :
                new ObjectParameter("CustomerCode", typeof(string));
    
            var customerTypeIDParameter = customerTypeID.HasValue ?
                new ObjectParameter("CustomerTypeID", customerTypeID) :
                new ObjectParameter("CustomerTypeID", typeof(int));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var groupNameParameter = groupName != null ?
                new ObjectParameter("GroupName", groupName) :
                new ObjectParameter("GroupName", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var gstnoParameter = gstno != null ?
                new ObjectParameter("Gstno", gstno) :
                new ObjectParameter("Gstno", typeof(string));
    
            var pannoParameter = panno != null ?
                new ObjectParameter("Panno", panno) :
                new ObjectParameter("Panno", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var fICINoParameter = fICINo != null ?
                new ObjectParameter("FICINo", fICINo) :
                new ObjectParameter("FICINo", typeof(string));
    
            var storageDiscountParameter = storageDiscount.HasValue ?
                new ObjectParameter("StorageDiscount", storageDiscount) :
                new ObjectParameter("StorageDiscount", typeof(decimal));
    
            var labourDiscountParameter = labourDiscount.HasValue ?
                new ObjectParameter("LabourDiscount", labourDiscount) :
                new ObjectParameter("LabourDiscount", typeof(decimal));
    
            var referredByParameter = referredBy != null ?
                new ObjectParameter("ReferredBy", referredBy) :
                new ObjectParameter("ReferredBy", typeof(string));
    
            var pinCodeParameter = pinCode != null ?
                new ObjectParameter("PinCode", pinCode) :
                new ObjectParameter("PinCode", typeof(string));
    
            var gSTStateCodeParameter = gSTStateCode != null ?
                new ObjectParameter("GSTStateCode", gSTStateCode) :
                new ObjectParameter("GSTStateCode", typeof(string));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Customers_Insert", customerIDParameter, warehouseIDParameter, initialsParameter, customerNameParameter, customerCodeParameter, customerTypeIDParameter, address1Parameter, address2Parameter, groupNameParameter, cityIdParameter, emailParameter, gstnoParameter, pannoParameter, createdbyParameter, stateParameter, fICINoParameter, storageDiscountParameter, labourDiscountParameter, referredByParameter, pinCodeParameter, gSTStateCodeParameter, rateIDParameter);
        }
    
        public virtual ObjectResult<CustomerStockDetail_Result> CustomerStockDetail(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerStockDetail_Result>("CustomerStockDetail", customerIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerStorageArea_insert(Nullable<int> customerStorageAreaID, Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> storageAreaID, Nullable<int> spaceAllocationPercentage, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<decimal> rate, Nullable<int> billingCycleID, Nullable<int> createdBy)
        {
            var customerStorageAreaIDParameter = customerStorageAreaID.HasValue ?
                new ObjectParameter("CustomerStorageAreaID", customerStorageAreaID) :
                new ObjectParameter("CustomerStorageAreaID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            var spaceAllocationPercentageParameter = spaceAllocationPercentage.HasValue ?
                new ObjectParameter("SpaceAllocationPercentage", spaceAllocationPercentage) :
                new ObjectParameter("SpaceAllocationPercentage", typeof(int));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerStorageArea_insert", customerStorageAreaIDParameter, customerIDParameter, warehouseIDParameter, storageAreaIDParameter, spaceAllocationPercentageParameter, startDateParameter, endDateParameter, rateParameter, billingCycleIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerStorageArea_List_Result> CustomerStorageArea_List(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerStorageArea_List_Result>("CustomerStorageArea_List", warehouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerStorageArea_Select_Result> CustomerStorageArea_Select(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerStorageArea_Select_Result>("CustomerStorageArea_Select", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerStorageAreaWiseStock_Result> CustomerStorageAreaWiseStock(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerStorageAreaWiseStock_Result>("CustomerStorageAreaWiseStock", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<CustomersWithoutCustomerRate_Result> CustomersWithoutCustomerRate(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomersWithoutCustomerRate_Result>("CustomersWithoutCustomerRate", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<CustomerView_GetData_Result> CustomerView_GetData(Nullable<int> customerID, Nullable<int> warehouseID, string lotNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerView_GetData_Result>("CustomerView_GetData", customerIDParameter, warehouseIDParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<CustomerWarehouseList_Result> CustomerWarehouseList(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerWarehouseList_Result>("CustomerWarehouseList", customerIDParameter);
        }
    
        public virtual ObjectResult<CustomerWarehouseMapping_list_Result> CustomerWarehouseMapping_list(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerWarehouseMapping_list_Result>("CustomerWarehouseMapping_list", customerIDParameter);
        }
    
        public virtual ObjectResult<string> DayClosing_insert(Nullable<int> warehouseID, Nullable<System.DateTime> closingDate, Nullable<int> createdBy)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var closingDateParameter = closingDate.HasValue ?
                new ObjectParameter("ClosingDate", closingDate) :
                new ObjectParameter("ClosingDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DayClosing_insert", warehouseIDParameter, closingDateParameter, createdByParameter);
        }
    
        public virtual ObjectResult<DayClosing_List_Result> DayClosing_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DayClosing_List_Result>("DayClosing_List");
        }
    
        public virtual ObjectResult<DCB_InwardDetail_Result> DCB_InwardDetail(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DCB_InwardDetail_Result>("DCB_InwardDetail", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryOrder_Cancelled(Nullable<int> deliveryOrderID, Nullable<int> customerId, string remarks, Nullable<int> createdBy)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryOrder_Cancelled", deliveryOrderIDParameter, customerIdParameter, remarksParameter, createdByParameter);
        }
    
        public virtual int DeliveryOrder_Insert(Nullable<int> deliveryOrderID, Nullable<System.DateTime> deliveryOrderDate, Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<int> companyID, string deliverTo, Nullable<int> customerPartyID, string shippingAddress, string orderGivenBy, string remarks, Nullable<int> createdBy, Nullable<int> byCustomer, Nullable<bool> isDoDispatch, string truckNo, string containerNo)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var deliveryOrderDateParameter = deliveryOrderDate.HasValue ?
                new ObjectParameter("DeliveryOrderDate", deliveryOrderDate) :
                new ObjectParameter("DeliveryOrderDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var deliverToParameter = deliverTo != null ?
                new ObjectParameter("DeliverTo", deliverTo) :
                new ObjectParameter("DeliverTo", typeof(string));
    
            var customerPartyIDParameter = customerPartyID.HasValue ?
                new ObjectParameter("CustomerPartyID", customerPartyID) :
                new ObjectParameter("CustomerPartyID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var orderGivenByParameter = orderGivenBy != null ?
                new ObjectParameter("OrderGivenBy", orderGivenBy) :
                new ObjectParameter("OrderGivenBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var byCustomerParameter = byCustomer.HasValue ?
                new ObjectParameter("ByCustomer", byCustomer) :
                new ObjectParameter("ByCustomer", typeof(int));
    
            var isDoDispatchParameter = isDoDispatch.HasValue ?
                new ObjectParameter("IsDoDispatch", isDoDispatch) :
                new ObjectParameter("IsDoDispatch", typeof(bool));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeliveryOrder_Insert", deliveryOrderIDParameter, deliveryOrderDateParameter, customerIDParameter, wareHouseIDParameter, companyIDParameter, deliverToParameter, customerPartyIDParameter, shippingAddressParameter, orderGivenByParameter, remarksParameter, createdByParameter, byCustomerParameter, isDoDispatchParameter, truckNoParameter, containerNoParameter);
        }
    
        public virtual ObjectResult<DeliveryOrder_List_Result> DeliveryOrder_List(Nullable<int> financialYearID, Nullable<int> wareHouseID, Nullable<int> userID)
        {
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrder_List_Result>("DeliveryOrder_List", financialYearIDParameter, wareHouseIDParameter, userIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrder_listAPI_Result> DeliveryOrder_listAPI(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrder_listAPI_Result>("DeliveryOrder_listAPI", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<string> DeliveryOrder_PartiallyCancelled(Nullable<int> deliveryOrderID, Nullable<int> customerId, string remarks, Nullable<int> createdBy)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DeliveryOrder_PartiallyCancelled", deliveryOrderIDParameter, customerIdParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<DeliveryOrder_PendingDOList_Result> DeliveryOrder_PendingDOList(string lotNo, Nullable<int> storageAreaID)
        {
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrder_PendingDOList_Result>("DeliveryOrder_PendingDOList", lotNoParameter, storageAreaIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrder_Search_Result> DeliveryOrder_Search(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrder_Search_Result>("DeliveryOrder_Search", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrder_Select_Result> DeliveryOrder_Select(Nullable<int> deliveryOrderID)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrder_Select_Result>("DeliveryOrder_Select", deliveryOrderIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> DeliveryOrderCancelled_insert(Nullable<int> deliveryOrderID, string cancelRemark, Nullable<int> cancelledBy)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var cancelRemarkParameter = cancelRemark != null ?
                new ObjectParameter("CancelRemark", cancelRemark) :
                new ObjectParameter("CancelRemark", typeof(string));
    
            var cancelledByParameter = cancelledBy.HasValue ?
                new ObjectParameter("CancelledBy", cancelledBy) :
                new ObjectParameter("CancelledBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("DeliveryOrderCancelled_insert", deliveryOrderIDParameter, cancelRemarkParameter, cancelledByParameter);
        }
    
        public virtual ObjectResult<DeliveryOrderCustomer_List_Result> DeliveryOrderCustomer_List(Nullable<int> wareHouseID, Nullable<int> customerID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrderCustomer_List_Result>("DeliveryOrderCustomer_List", wareHouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrderDispatch_List_Result> DeliveryOrderDispatch_List(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrderDispatch_List_Result>("DeliveryOrderDispatch_List", customerIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrderWeb_List_Result> DeliveryOrderWeb_List(Nullable<int> wareHouseID, Nullable<int> customerID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrderWeb_List_Result>("DeliveryOrderWeb_List", wareHouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<DeliveryOrderWeb_validation_Result> DeliveryOrderWeb_validation(Nullable<int> deliveryOrderID)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DeliveryOrderWeb_validation_Result>("DeliveryOrderWeb_validation", deliveryOrderIDParameter);
        }
    
        public virtual ObjectResult<string> Department_Insert_Update(string departmentName, string departmentCode, Nullable<int> departmentID, Nullable<bool> isActive)
        {
            var departmentNameParameter = departmentName != null ?
                new ObjectParameter("DepartmentName", departmentName) :
                new ObjectParameter("DepartmentName", typeof(string));
    
            var departmentCodeParameter = departmentCode != null ?
                new ObjectParameter("DepartmentCode", departmentCode) :
                new ObjectParameter("DepartmentCode", typeof(string));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Department_Insert_Update", departmentNameParameter, departmentCodeParameter, departmentIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Department_Select_Result> Department_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Department_Select_Result>("Department_Select");
        }
    
        public virtual ObjectResult<string> Designation_Insert_Update(Nullable<int> designationID, string designationName, string designationCode, Nullable<bool> isActive)
        {
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var designationNameParameter = designationName != null ?
                new ObjectParameter("DesignationName", designationName) :
                new ObjectParameter("DesignationName", typeof(string));
    
            var designationCodeParameter = designationCode != null ?
                new ObjectParameter("DesignationCode", designationCode) :
                new ObjectParameter("DesignationCode", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Designation_Insert_Update", designationIDParameter, designationNameParameter, designationCodeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Designation_Select_Result> Designation_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Designation_Select_Result>("Designation_Select");
        }
    
        public virtual ObjectResult<string> Dispatch_Cancelled(Nullable<int> dispatchID, string remark, Nullable<int> createdBy)
        {
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Dispatch_Cancelled", dispatchIDParameter, remarkParameter, createdByParameter);
        }
    
        public virtual int Dispatch_insert(Nullable<int> dispatchID, Nullable<int> deliveryOrderID, Nullable<int> customerID, Nullable<int> customerPartyID, string shippingAddress, string orderGivenBy, string remarks, Nullable<int> createdBy, Nullable<int> wareHouseID, string truckNo, string containerNo)
        {
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var customerPartyIDParameter = customerPartyID.HasValue ?
                new ObjectParameter("CustomerPartyID", customerPartyID) :
                new ObjectParameter("CustomerPartyID", typeof(int));
    
            var shippingAddressParameter = shippingAddress != null ?
                new ObjectParameter("ShippingAddress", shippingAddress) :
                new ObjectParameter("ShippingAddress", typeof(string));
    
            var orderGivenByParameter = orderGivenBy != null ?
                new ObjectParameter("OrderGivenBy", orderGivenBy) :
                new ObjectParameter("OrderGivenBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Dispatch_insert", dispatchIDParameter, deliveryOrderIDParameter, customerIDParameter, customerPartyIDParameter, shippingAddressParameter, orderGivenByParameter, remarksParameter, createdByParameter, wareHouseIDParameter, truckNoParameter, containerNoParameter);
        }
    
        public virtual ObjectResult<Dispatch_Select_Result> Dispatch_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dispatch_Select_Result>("Dispatch_Select");
        }
    
        public virtual ObjectResult<DispatchEdit_Select_Result> DispatchEdit_Select(Nullable<int> dispatchID)
        {
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DispatchEdit_Select_Result>("DispatchEdit_Select", dispatchIDParameter);
        }
    
        public virtual ObjectResult<string> Dock_insert(Nullable<int> dockID, string dockName, Nullable<int> dockNo, Nullable<bool> isActive, Nullable<int> wareHouseID)
        {
            var dockIDParameter = dockID.HasValue ?
                new ObjectParameter("DockID", dockID) :
                new ObjectParameter("DockID", typeof(int));
    
            var dockNameParameter = dockName != null ?
                new ObjectParameter("DockName", dockName) :
                new ObjectParameter("DockName", typeof(string));
    
            var dockNoParameter = dockNo.HasValue ?
                new ObjectParameter("DockNo", dockNo) :
                new ObjectParameter("DockNo", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Dock_insert", dockIDParameter, dockNameParameter, dockNoParameter, isActiveParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Dock_Select_Result> Dock_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Dock_Select_Result>("Dock_Select");
        }
    
        public virtual ObjectResult<string> DoCustomerContract_select(Nullable<int> orderGivenbyID)
        {
            var orderGivenbyIDParameter = orderGivenbyID.HasValue ?
                new ObjectParameter("OrderGivenbyID", orderGivenbyID) :
                new ObjectParameter("OrderGivenbyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("DoCustomerContract_select", orderGivenbyIDParameter);
        }
    
        public virtual ObjectResult<DSB_Activity_Monthly_Result> DSB_Activity_Monthly(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_Activity_Monthly_Result>("DSB_Activity_Monthly", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_BillSummary_Result> DSB_BillSummary(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_BillSummary_Result>("DSB_BillSummary", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_C_InwardDetail_Result> DSB_C_InwardDetail(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_C_InwardDetail_Result>("DSB_C_InwardDetail", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_CustomerOutWard_Result> DSB_CustomerOutWard(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_CustomerOutWard_Result>("DSB_CustomerOutWard", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_CustomerStock_Result> DSB_CustomerStock(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_CustomerStock_Result>("DSB_CustomerStock", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<DSB_Invoice_Storage_Result> DSB_Invoice_Storage(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_Invoice_Storage_Result>("DSB_Invoice_Storage", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_InwardDetail_Result> DSB_InwardDetail(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_InwardDetail_Result>("DSB_InwardDetail", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_MonthlyTransactionCount_list_Result> DSB_MonthlyTransactionCount_list(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_MonthlyTransactionCount_list_Result>("DSB_MonthlyTransactionCount_list", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_Process_Result> DSB_Process(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_Process_Result>("DSB_Process", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_Stock_Result> DSB_Stock(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_Stock_Result>("DSB_Stock", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_StorageAreaWise_Charges_Result> DSB_StorageAreaWise_Charges(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_StorageAreaWise_Charges_Result>("DSB_StorageAreaWise_Charges", warehouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_StorageOccupancy_Result> DSB_StorageOccupancy()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_StorageOccupancy_Result>("DSB_StorageOccupancy");
        }
    
        public virtual ObjectResult<DSB_TodayTransactionCount_list_Result> DSB_TodayTransactionCount_list(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_TodayTransactionCount_list_Result>("DSB_TodayTransactionCount_list", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_WarehouseStock_Annually_Result> DSB_WarehouseStock_Annually(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_WarehouseStock_Annually_Result>("DSB_WarehouseStock_Annually", warehouseIDParameter);
        }
    
        public virtual int DSB_WarehouseStorageAreaOccupancy(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DSB_WarehouseStorageAreaOccupancy", warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<DSB_Web_CustomerStockTransaction_Result> DSB_Web_CustomerStockTransaction(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_Web_CustomerStockTransaction_Result>("DSB_Web_CustomerStockTransaction", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<DSB_WebTodayTransactionCount_list_Result> DSB_WebTodayTransactionCount_list(Nullable<int> customerID, Nullable<int> wareHouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DSB_WebTodayTransactionCount_list_Result>("DSB_WebTodayTransactionCount_list", customerIDParameter, wareHouseIDParameter);
        }
    
        public virtual int EditEntries_insert(Nullable<int> editEntriesID, Nullable<int> createdby, string process)
        {
            var editEntriesIDParameter = editEntriesID.HasValue ?
                new ObjectParameter("EditEntriesID", editEntriesID) :
                new ObjectParameter("EditEntriesID", typeof(int));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            var processParameter = process != null ?
                new ObjectParameter("process", process) :
                new ObjectParameter("process", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditEntries_insert", editEntriesIDParameter, createdbyParameter, processParameter);
        }
    
        public virtual ObjectResult<Email_CustomerContractList_Result> Email_CustomerContractList(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("customerID", customerID) :
                new ObjectParameter("customerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Email_CustomerContractList_Result>("Email_CustomerContractList", customerIDParameter);
        }
    
        public virtual int Email_Report_insert(Nullable<int> reportID, Nullable<bool> today, Nullable<bool> daily, Nullable<bool> weekly, string weekly_Day, Nullable<bool> monthly, Nullable<int> monthaly_day, Nullable<System.TimeSpan> emailTime, Nullable<int> emailReportID, string emailSubject, string emailText, Nullable<int> wareHouseID, string emailReportName, Nullable<int> createdBy, Nullable<int> emailReportDID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var todayParameter = today.HasValue ?
                new ObjectParameter("Today", today) :
                new ObjectParameter("Today", typeof(bool));
    
            var dailyParameter = daily.HasValue ?
                new ObjectParameter("Daily", daily) :
                new ObjectParameter("Daily", typeof(bool));
    
            var weeklyParameter = weekly.HasValue ?
                new ObjectParameter("Weekly", weekly) :
                new ObjectParameter("Weekly", typeof(bool));
    
            var weekly_DayParameter = weekly_Day != null ?
                new ObjectParameter("weekly_Day", weekly_Day) :
                new ObjectParameter("weekly_Day", typeof(string));
    
            var monthlyParameter = monthly.HasValue ?
                new ObjectParameter("Monthly", monthly) :
                new ObjectParameter("Monthly", typeof(bool));
    
            var monthaly_dayParameter = monthaly_day.HasValue ?
                new ObjectParameter("Monthaly_day", monthaly_day) :
                new ObjectParameter("Monthaly_day", typeof(int));
    
            var emailTimeParameter = emailTime.HasValue ?
                new ObjectParameter("EmailTime", emailTime) :
                new ObjectParameter("EmailTime", typeof(System.TimeSpan));
    
            var emailReportIDParameter = emailReportID.HasValue ?
                new ObjectParameter("EmailReportID", emailReportID) :
                new ObjectParameter("EmailReportID", typeof(int));
    
            var emailSubjectParameter = emailSubject != null ?
                new ObjectParameter("EmailSubject", emailSubject) :
                new ObjectParameter("EmailSubject", typeof(string));
    
            var emailTextParameter = emailText != null ?
                new ObjectParameter("EmailText", emailText) :
                new ObjectParameter("EmailText", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var emailReportNameParameter = emailReportName != null ?
                new ObjectParameter("EmailReportName", emailReportName) :
                new ObjectParameter("EmailReportName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var emailReportDIDParameter = emailReportDID.HasValue ?
                new ObjectParameter("EmailReportDID", emailReportDID) :
                new ObjectParameter("EmailReportDID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Email_Report_insert", reportIDParameter, todayParameter, dailyParameter, weeklyParameter, weekly_DayParameter, monthlyParameter, monthaly_dayParameter, emailTimeParameter, emailReportIDParameter, emailSubjectParameter, emailTextParameter, wareHouseIDParameter, emailReportNameParameter, createdByParameter, emailReportDIDParameter);
        }
    
        public virtual ObjectResult<Email_ReportList_Result> Email_ReportList(Nullable<int> reportID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Email_ReportList_Result>("Email_ReportList", reportIDParameter);
        }
    
        public virtual ObjectResult<Email_Send_Result> Email_Send()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Email_Send_Result>("Email_Send");
        }
    
        public virtual int EmailNotification_Insert(string process, Nullable<int> referanceID)
        {
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var referanceIDParameter = referanceID.HasValue ?
                new ObjectParameter("ReferanceID", referanceID) :
                new ObjectParameter("ReferanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailNotification_Insert", processParameter, referanceIDParameter);
        }
    
        public virtual int EmailNotification_InsertJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailNotification_InsertJob");
        }
    
        public virtual ObjectResult<EmailNotification_Select_Result> EmailNotification_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailNotification_Select_Result>("EmailNotification_Select");
        }
    
        public virtual ObjectResult<EmailNotification_SendData_Result> EmailNotification_SendData(Nullable<int> customerID, Nullable<int> reportID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailNotification_SendData_Result>("EmailNotification_SendData", customerIDParameter, reportIDParameter);
        }
    
        public virtual int EmailNotification_Update(Nullable<int> emailNotificationID, string response)
        {
            var emailNotificationIDParameter = emailNotificationID.HasValue ?
                new ObjectParameter("EmailNotificationID", emailNotificationID) :
                new ObjectParameter("EmailNotificationID", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EmailNotification_Update", emailNotificationIDParameter, responseParameter);
        }
    
        public virtual ObjectResult<string> EmailReport_Delete(Nullable<int> emailReportDID, Nullable<int> emailReportID)
        {
            var emailReportDIDParameter = emailReportDID.HasValue ?
                new ObjectParameter("EmailReportDID", emailReportDID) :
                new ObjectParameter("EmailReportDID", typeof(int));
    
            var emailReportIDParameter = emailReportID.HasValue ?
                new ObjectParameter("EmailReportID", emailReportID) :
                new ObjectParameter("EmailReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("EmailReport_Delete", emailReportDIDParameter, emailReportIDParameter);
        }
    
        public virtual ObjectResult<EmailSchedule_List_Result> EmailSchedule_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<EmailSchedule_List_Result>("EmailSchedule_List");
        }
    
        public virtual ObjectResult<string> Export_Cancelled(Nullable<int> exportID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<int> createdBy, string remarks)
        {
            var exportIDParameter = exportID.HasValue ?
                new ObjectParameter("ExportID", exportID) :
                new ObjectParameter("ExportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Export_Cancelled", exportIDParameter, warehouseIDParameter, customerIDParameter, createdByParameter, remarksParameter);
        }
    
        public virtual int Export_Insert(Nullable<int> exportID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<System.DateTime> exportDate, string truckNo, string containerNo, Nullable<decimal> exportCharges, Nullable<int> labourContractorID, string remarks, Nullable<int> createdBy)
        {
            var exportIDParameter = exportID.HasValue ?
                new ObjectParameter("ExportID", exportID) :
                new ObjectParameter("ExportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var exportDateParameter = exportDate.HasValue ?
                new ObjectParameter("ExportDate", exportDate) :
                new ObjectParameter("ExportDate", typeof(System.DateTime));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var exportChargesParameter = exportCharges.HasValue ?
                new ObjectParameter("ExportCharges", exportCharges) :
                new ObjectParameter("ExportCharges", typeof(decimal));
    
            var labourContractorIDParameter = labourContractorID.HasValue ?
                new ObjectParameter("LabourContractorID", labourContractorID) :
                new ObjectParameter("LabourContractorID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Export_Insert", exportIDParameter, warehouseIDParameter, customerIDParameter, exportDateParameter, truckNoParameter, containerNoParameter, exportChargesParameter, labourContractorIDParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Export_Select_Result> Export_Select(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Export_Select_Result>("Export_Select", warehouseIDParameter);
        }
    
        public virtual ObjectResult<Finacialyear_Select_Result> Finacialyear_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Finacialyear_Select_Result>("Finacialyear_Select");
        }
    
        public virtual ObjectResult<string> FinancialYears_Insert(Nullable<int> financialYearID, string year, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<bool> isActive, Nullable<int> wareHouseID)
        {
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var yearParameter = year != null ?
                new ObjectParameter("Year", year) :
                new ObjectParameter("Year", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("FinancialYears_Insert", financialYearIDParameter, yearParameter, startDateParameter, endDateParameter, isActiveParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<GerRepackingAfterProduct_Result> GerRepackingAfterProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GerRepackingAfterProduct_Result>("GerRepackingAfterProduct", productIDParameter);
        }
    
        public virtual ObjectResult<Get_AdditionalServiceCharges_Result> Get_AdditionalServiceCharges(Nullable<int> customerID, Nullable<int> additionalServiceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var additionalServiceIDParameter = additionalServiceID.HasValue ?
                new ObjectParameter("AdditionalServiceID", additionalServiceID) :
                new ObjectParameter("AdditionalServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_AdditionalServiceCharges_Result>("Get_AdditionalServiceCharges", customerIDParameter, additionalServiceIDParameter);
        }
    
        public virtual ObjectResult<Get_AdditionalServiceDetail_Result> Get_AdditionalServiceDetail(Nullable<int> customerID, Nullable<int> additionalServiceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var additionalServiceIDParameter = additionalServiceID.HasValue ?
                new ObjectParameter("AdditionalServiceID", additionalServiceID) :
                new ObjectParameter("AdditionalServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_AdditionalServiceDetail_Result>("Get_AdditionalServiceDetail", customerIDParameter, additionalServiceIDParameter);
        }
    
        public virtual ObjectResult<string> Get_GststateCode(Nullable<int> stateID)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Get_GststateCode", stateIDParameter);
        }
    
        public virtual ObjectResult<Get_HoldDO_Result> Get_HoldDO()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_HoldDO_Result>("Get_HoldDO");
        }
    
        public virtual ObjectResult<Get_InvoiceNo_Result> Get_InvoiceNo(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InvoiceNo_Result>("Get_InvoiceNo", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Get_InvoiceProcessDetail_Result> Get_InvoiceProcessDetail(string invoiceNo)
        {
            var invoiceNoParameter = invoiceNo != null ?
                new ObjectParameter("InvoiceNo", invoiceNo) :
                new ObjectParameter("InvoiceNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_InvoiceProcessDetail_Result>("Get_InvoiceProcessDetail", invoiceNoParameter);
        }
    
        public virtual ObjectResult<Get_MinMax_Temp_Result> Get_MinMax_Temp(Nullable<int> temperatureCategoryID)
        {
            var temperatureCategoryIDParameter = temperatureCategoryID.HasValue ?
                new ObjectParameter("TemperatureCategoryID", temperatureCategoryID) :
                new ObjectParameter("TemperatureCategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_MinMax_Temp_Result>("Get_MinMax_Temp", temperatureCategoryIDParameter);
        }
    
        public virtual ObjectResult<Get_PendingDO_Result> Get_PendingDO(Nullable<int> action)
        {
            var actionParameter = action.HasValue ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_PendingDO_Result>("Get_PendingDO", actionParameter);
        }
    
        public virtual ObjectResult<Get_ServiceTypeID_Result> Get_ServiceTypeID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_ServiceTypeID_Result>("Get_ServiceTypeID");
        }
    
        public virtual ObjectResult<Get_StorageAreaType_Result> Get_StorageAreaType(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("productID", productID) :
                new ObjectParameter("productID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_StorageAreaType_Result>("Get_StorageAreaType", productIDParameter);
        }
    
        public virtual ObjectResult<Get_TemperatureCategory_Result> Get_TemperatureCategory(Nullable<int> itemID)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_TemperatureCategory_Result>("Get_TemperatureCategory", itemIDParameter);
        }
    
        public virtual ObjectResult<Get_UIGropID_Result> Get_UIGropID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_UIGropID_Result>("Get_UIGropID");
        }
    
        public virtual ObjectResult<Get_UserDetail_Result> Get_UserDetail(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_UserDetail_Result>("Get_UserDetail", userIDParameter);
        }
    
        public virtual ObjectResult<byte[]> Get_WareHouseImage(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<byte[]>("Get_WareHouseImage", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<GetAdditionalServiceLabourCharges_Result> GetAdditionalServiceLabourCharges(Nullable<int> customerID, Nullable<int> productID, Nullable<int> serviceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAdditionalServiceLabourCharges_Result>("GetAdditionalServiceLabourCharges", customerIDParameter, productIDParameter, serviceIDParameter);
        }
    
        public virtual ObjectResult<GetAllBrands_Result> GetAllBrands()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllBrands_Result>("GetAllBrands");
        }
    
        public virtual ObjectResult<Nullable<int>> GetAllInvoiceID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetAllInvoiceID");
        }
    
        public virtual ObjectResult<GetAllLabourContractor_Result> GetAllLabourContractor()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllLabourContractor_Result>("GetAllLabourContractor");
        }
    
        public virtual ObjectResult<GetAllProducts_Result> GetAllProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducts_Result>("GetAllProducts");
        }
    
        public virtual ObjectResult<GetAllStorageArea_Result> GetAllStorageArea()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStorageArea_Result>("GetAllStorageArea");
        }
    
        public virtual ObjectResult<GetAllUserName_Result> GetAllUserName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllUserName_Result>("GetAllUserName");
        }
    
        public virtual ObjectResult<GetAllWarehouse_Result> GetAllWarehouse()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllWarehouse_Result>("GetAllWarehouse");
        }
    
        public virtual int GetAvailableStorageArea(Nullable<int> warehouseID, Nullable<int> customerID, string mode, Nullable<int> inwardID, Nullable<int> challanID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAvailableStorageArea", warehouseIDParameter, customerIDParameter, modeParameter, inwardIDParameter, challanIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetBillingCycle(Nullable<int> customerID, Nullable<int> productID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetBillingCycle", customerIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<GetChallanDetailByID_Result> GetChallanDetailByID(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallanDetailByID_Result>("GetChallanDetailByID", challanIDParameter);
        }
    
        public virtual ObjectResult<GetChallanStorageArea_Result> GetChallanStorageArea(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetChallanStorageArea_Result>("GetChallanStorageArea", challanIDParameter);
        }
    
        public virtual ObjectResult<GetCity_Result> GetCity()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCity_Result>("GetCity");
        }
    
        public virtual ObjectResult<GetCityList_Result> GetCityList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCityList_Result>("GetCityList");
        }
    
        public virtual ObjectResult<string> GetCompany()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetCompany");
        }
    
        public virtual ObjectResult<GetCustomerContacts_Result> GetCustomerContacts(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerContacts_Result>("GetCustomerContacts", customerIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerName_Result> GetCustomerName(Nullable<int> warehousrID)
        {
            var warehousrIDParameter = warehousrID.HasValue ?
                new ObjectParameter("WarehousrID", warehousrID) :
                new ObjectParameter("WarehousrID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerName_Result>("GetCustomerName", warehousrIDParameter);
        }
    
        public virtual ObjectResult<GetCustomerParty_Result> GetCustomerParty()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerParty_Result>("GetCustomerParty");
        }
    
        public virtual ObjectResult<GetCustomers_Result> GetCustomers()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomers_Result>("GetCustomers");
        }
    
        public virtual ObjectResult<GetCustomerStockSearch_Result> GetCustomerStockSearch(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerStockSearch_Result>("GetCustomerStockSearch", customerIDParameter);
        }
    
        public virtual ObjectResult<GetDeliveryOrderByID_Result> GetDeliveryOrderByID(Nullable<int> customerID, Nullable<int> warehouseId, Nullable<int> companyID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeliveryOrderByID_Result>("GetDeliveryOrderByID", customerIDParameter, warehouseIdParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDeliveryOrderDetail_Result> GetDeliveryOrderDetail(Nullable<int> dispatchID)
        {
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDeliveryOrderDetail_Result>("GetDeliveryOrderDetail", dispatchIDParameter);
        }
    
        public virtual ObjectResult<GetDispatchByID_Result> GetDispatchByID(Nullable<int> customerID, Nullable<int> warehouseId, Nullable<int> companyID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIdParameter = warehouseId.HasValue ?
                new ObjectParameter("WarehouseId", warehouseId) :
                new ObjectParameter("WarehouseId", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDispatchByID_Result>("GetDispatchByID", customerIDParameter, warehouseIdParameter, companyIDParameter);
        }
    
        public virtual ObjectResult<GetDispatchDetails_Result> GetDispatchDetails(Nullable<int> deliveryOrderID, Nullable<int> deliveryOrderNo)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var deliveryOrderNoParameter = deliveryOrderNo.HasValue ?
                new ObjectParameter("DeliveryOrderNo", deliveryOrderNo) :
                new ObjectParameter("DeliveryOrderNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDispatchDetails_Result>("GetDispatchDetails", deliveryOrderIDParameter, deliveryOrderNoParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> GetDispatchID(Nullable<int> deliveryOrderID)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("GetDispatchID", deliveryOrderIDParameter);
        }
    
        public virtual ObjectResult<GetDOCancelListByCustomer_Result> GetDOCancelListByCustomer(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDOCancelListByCustomer_Result>("GetDOCancelListByCustomer", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetExportDetailsByID_Result> GetExportDetailsByID(Nullable<int> exportID)
        {
            var exportIDParameter = exportID.HasValue ?
                new ObjectParameter("ExportID", exportID) :
                new ObjectParameter("ExportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExportDetailsByID_Result>("GetExportDetailsByID", exportIDParameter);
        }
    
        public virtual ObjectResult<GetExportServices_Result> GetExportServices(Nullable<int> customerID, Nullable<int> productID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExportServices_Result>("GetExportServices", customerIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<GetInwardByLotNo_Result> GetInwardByLotNo(string lotNo, Nullable<int> wareHouseID)
        {
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardByLotNo_Result>("GetInwardByLotNo", lotNoParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<GetInwardChallenData_Result> GetInwardChallenData(Nullable<int> customerID, Nullable<int> warehouseID, string challanNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var challanNoParameter = challanNo != null ?
                new ObjectParameter("ChallanNo", challanNo) :
                new ObjectParameter("ChallanNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardChallenData_Result>("GetInwardChallenData", customerIDParameter, warehouseIDParameter, challanNoParameter);
        }
    
        public virtual ObjectResult<GetInwardDetails_Result> GetInwardDetails(Nullable<int> customerID, string lotNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardDetails_Result>("GetInwardDetails", customerIDParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<GetInwardDetailsByID_Result> GetInwardDetailsByID(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardDetailsByID_Result>("GetInwardDetailsByID", inwardIDParameter);
        }
    
        public virtual ObjectResult<GetInwardlabelLotno_Result> GetInwardlabelLotno(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardlabelLotno_Result>("GetInwardlabelLotno", inwardIDParameter);
        }
    
        public virtual ObjectResult<GetInwardList_Result> GetInwardList(Nullable<int> companyID, Nullable<int> warehouseID, Nullable<int> financialYearID)
        {
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardList_Result>("GetInwardList", companyIDParameter, warehouseIDParameter, financialYearIDParameter);
        }
    
        public virtual ObjectResult<GetInwardOutward_EditCharge_Result> GetInwardOutward_EditCharge(Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, string process, string lotno, Nullable<int> customerID)
        {
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("fromDate", fromDate) :
                new ObjectParameter("fromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var lotnoParameter = lotno != null ?
                new ObjectParameter("lotno", lotno) :
                new ObjectParameter("lotno", typeof(string));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardOutward_EditCharge_Result>("GetInwardOutward_EditCharge", fromDateParameter, toDateParameter, processParameter, lotnoParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<GetInwardServices_Result> GetInwardServices(Nullable<int> customerID, Nullable<int> productID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardServices_Result>("GetInwardServices", customerIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<GetInwardStorageArea_Result> GetInwardStorageArea()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInwardStorageArea_Result>("GetInwardStorageArea");
        }
    
        public virtual ObjectResult<GetItemTypes_Result> GetItemTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetItemTypes_Result>("GetItemTypes");
        }
    
        public virtual ObjectResult<GetLotNo_Result> GetLotNo(Nullable<int> warehouseID, Nullable<int> storageAreaMasterID, string financialYear, Nullable<int> financialYearID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var storageAreaMasterIDParameter = storageAreaMasterID.HasValue ?
                new ObjectParameter("StorageAreaMasterID", storageAreaMasterID) :
                new ObjectParameter("StorageAreaMasterID", typeof(int));
    
            var financialYearParameter = financialYear != null ?
                new ObjectParameter("FinancialYear", financialYear) :
                new ObjectParameter("FinancialYear", typeof(string));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLotNo_Result>("GetLotNo", warehouseIDParameter, storageAreaMasterIDParameter, financialYearParameter, financialYearIDParameter);
        }
    
        public virtual ObjectResult<GetOutwardByOutwardNo_Result> GetOutwardByOutwardNo(Nullable<int> customerID, string outWardNo)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var outWardNoParameter = outWardNo != null ?
                new ObjectParameter("OutWardNo", outWardNo) :
                new ObjectParameter("OutWardNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOutwardByOutwardNo_Result>("GetOutwardByOutwardNo", customerIDParameter, outWardNoParameter);
        }
    
        public virtual ObjectResult<GetOutwardList_Result> GetOutwardList(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOutwardList_Result>("GetOutwardList", warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetOutwardServices_Result> GetOutwardServices(Nullable<int> customerID, Nullable<int> productID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetOutwardServices_Result>("GetOutwardServices", customerIDParameter, productIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetParentCompanyName_Result> GetParentCompanyName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentCompanyName_Result>("GetParentCompanyName");
        }
    
        public virtual ObjectResult<GetParentStorageArea_Result> GetParentStorageArea(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetParentStorageArea_Result>("GetParentStorageArea", warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetPaymentReceiptList_Result> GetPaymentReceiptList(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaymentReceiptList_Result>("GetPaymentReceiptList", warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetPlugInList_Result> GetPlugInList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPlugInList_Result>("GetPlugInList");
        }
    
        public virtual ObjectResult<GetProductByID_Result> GetProductByID(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductByID_Result>("GetProductByID", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetProductTempCategory_Result> GetProductTempCategory(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProductTempCategory_Result>("GetProductTempCategory", productIDParameter);
        }
    
        public virtual ObjectResult<GetRateListByID_Result> GetRateListByID(Nullable<int> productID, Nullable<int> rateID, Nullable<int> srNo)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var srNoParameter = srNo.HasValue ?
                new ObjectParameter("SrNo", srNo) :
                new ObjectParameter("SrNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRateListByID_Result>("GetRateListByID", productIDParameter, rateIDParameter, srNoParameter);
        }
    
        public virtual ObjectResult<GetRepackingProductList_Result> GetRepackingProductList(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepackingProductList_Result>("GetRepackingProductList", customerIDParameter);
        }
    
        public virtual ObjectResult<GetRepackingServices_Result> GetRepackingServices(Nullable<int> customerID, Nullable<int> productID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRepackingServices_Result>("GetRepackingServices", customerIDParameter, productIDParameter);
        }
    
        public virtual ObjectResult<GetReport_Result> GetReport(Nullable<int> reportID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReport_Result>("GetReport", reportIDParameter);
        }
    
        public virtual ObjectResult<GetReportPrintInfo_Result> GetReportPrintInfo(string reportName)
        {
            var reportNameParameter = reportName != null ?
                new ObjectParameter("ReportName", reportName) :
                new ObjectParameter("ReportName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReportPrintInfo_Result>("GetReportPrintInfo", reportNameParameter);
        }
    
        public virtual ObjectResult<GetReports_Result> GetReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetReports_Result>("GetReports");
        }
    
        public virtual ObjectResult<GetServiceID_Result> GetServiceID()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceID_Result>("GetServiceID");
        }
    
        public virtual ObjectResult<GetServiceIDfor_AddServiceCharges_Result> GetServiceIDfor_AddServiceCharges()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceIDfor_AddServiceCharges_Result>("GetServiceIDfor_AddServiceCharges");
        }
    
        public virtual ObjectResult<GetServiceName_Result> GetServiceName()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetServiceName_Result>("GetServiceName");
        }
    
        public virtual ObjectResult<GetStorageArea_Result> GetStorageArea(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStorageArea_Result>("GetStorageArea", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<GetStorageAreaType_Result> GetStorageAreaType(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStorageAreaType_Result>("GetStorageAreaType", warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetTemperatureCategories_Result> GetTemperatureCategories(Nullable<int> tempID)
        {
            var tempIDParameter = tempID.HasValue ?
                new ObjectParameter("TempID", tempID) :
                new ObjectParameter("TempID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTemperatureCategories_Result>("GetTemperatureCategories", tempIDParameter);
        }
    
        public virtual ObjectResult<string> GetTheme(Nullable<int> themeID)
        {
            var themeIDParameter = themeID.HasValue ?
                new ObjectParameter("ThemeID", themeID) :
                new ObjectParameter("ThemeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("GetTheme", themeIDParameter);
        }
    
        public virtual ObjectResult<GetTotalStorageArea_Result> GetTotalStorageArea(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTotalStorageArea_Result>("GetTotalStorageArea", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual ObjectResult<GetTransferProductList_Result> GetTransferProductList(Nullable<int> customerID, Nullable<int> wareHouseID, Nullable<int> financialID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var financialIDParameter = financialID.HasValue ?
                new ObjectParameter("FinancialID", financialID) :
                new ObjectParameter("FinancialID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferProductList_Result>("GetTransferProductList", customerIDParameter, wareHouseIDParameter, financialIDParameter);
        }
    
        public virtual ObjectResult<GetTransferServices_Result> GetTransferServices(Nullable<int> customerID, Nullable<int> productID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTransferServices_Result>("GetTransferServices", customerIDParameter, productIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<GetUserMenu_Result> GetUserMenu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMenu_Result>("GetUserMenu", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserMenuGroup_Result> GetUserMenuGroup(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMenuGroup_Result>("GetUserMenuGroup", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserMenus_Result> GetUserMenus(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserMenus_Result>("GetUserMenus", userIDParameter);
        }
    
        public virtual ObjectResult<GetUserSubMenu_Result> GetUserSubMenu(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserSubMenu_Result>("GetUserSubMenu", userIDParameter);
        }
    
        public virtual ObjectResult<GetWareHouse_Result> GetWareHouse(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetWareHouse_Result>("GetWareHouse", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<string> HoldDeliveryOrder_Insert(Nullable<int> holdDOID, Nullable<int> wareHouseID, Nullable<int> deliveryOrderID, Nullable<int> statusID, string holdBy, string remarks, Nullable<int> createdBy, Nullable<System.DateTime> holdDate)
        {
            var holdDOIDParameter = holdDOID.HasValue ?
                new ObjectParameter("HoldDOID", holdDOID) :
                new ObjectParameter("HoldDOID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var holdByParameter = holdBy != null ?
                new ObjectParameter("HoldBy", holdBy) :
                new ObjectParameter("HoldBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var holdDateParameter = holdDate.HasValue ?
                new ObjectParameter("HoldDate", holdDate) :
                new ObjectParameter("HoldDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("HoldDeliveryOrder_Insert", holdDOIDParameter, wareHouseIDParameter, deliveryOrderIDParameter, statusIDParameter, holdByParameter, remarksParameter, createdByParameter, holdDateParameter);
        }
    
        public virtual ObjectResult<InitiatePayment_Insert_Result> InitiatePayment_Insert(Nullable<int> intiatePaymentID, string name, string emailID, string mobileNo, string productName, Nullable<decimal> amount, Nullable<bool> status, string response, string remarks, Nullable<int> createdBy)
        {
            var intiatePaymentIDParameter = intiatePaymentID.HasValue ?
                new ObjectParameter("IntiatePaymentID", intiatePaymentID) :
                new ObjectParameter("IntiatePaymentID", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var statusParameter = status.HasValue ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(bool));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<InitiatePayment_Insert_Result>("InitiatePayment_Insert", intiatePaymentIDParameter, nameParameter, emailIDParameter, mobileNoParameter, productNameParameter, amountParameter, statusParameter, responseParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<insert_Report_Result> insert_Report(Nullable<int> reportID, string uRL, byte[] buffer, Nullable<int> createdBy)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var uRLParameter = uRL != null ?
                new ObjectParameter("URL", uRL) :
                new ObjectParameter("URL", typeof(string));
    
            var bufferParameter = buffer != null ?
                new ObjectParameter("Buffer", buffer) :
                new ObjectParameter("Buffer", typeof(byte[]));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<insert_Report_Result>("insert_Report", reportIDParameter, uRLParameter, bufferParameter, createdByParameter);
        }
    
        public virtual int InsertInwardBarcode(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertInwardBarcode", inwardIDParameter);
        }
    
        public virtual int Invoice_Process(Nullable<System.DateTime> bDate, Nullable<int> warehouseID)
        {
            var bDateParameter = bDate.HasValue ?
                new ObjectParameter("BDate", bDate) :
                new ObjectParameter("BDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Invoice_Process", bDateParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<Invoice_Process_AddOnService_Result> Invoice_Process_AddOnService(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_Process_AddOnService_Result>("Invoice_Process_AddOnService", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter);
        }
    
        public virtual int Invoice_Process_Labour(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, Nullable<bool> inCompanyName)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var inCompanyNameParameter = inCompanyName.HasValue ?
                new ObjectParameter("InCompanyName", inCompanyName) :
                new ObjectParameter("InCompanyName", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Invoice_Process_Labour", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, inCompanyNameParameter);
        }
    
        public virtual int Invoice_Process_storage(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, Nullable<bool> inCompanyName)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var inCompanyNameParameter = inCompanyName.HasValue ?
                new ObjectParameter("InCompanyName", inCompanyName) :
                new ObjectParameter("InCompanyName", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Invoice_Process_storage", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, inCompanyNameParameter);
        }
    
        public virtual int Invoice_Process_storage_test(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, Nullable<bool> inCompanyName)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var inCompanyNameParameter = inCompanyName.HasValue ?
                new ObjectParameter("InCompanyName", inCompanyName) :
                new ObjectParameter("InCompanyName", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Invoice_Process_storage_test", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, inCompanyNameParameter);
        }
    
        public virtual ObjectResult<Invoice_Process_Validation_Result> Invoice_Process_Validation(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, Nullable<int> invoiceType)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var invoiceTypeParameter = invoiceType.HasValue ?
                new ObjectParameter("InvoiceType", invoiceType) :
                new ObjectParameter("InvoiceType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_Process_Validation_Result>("Invoice_Process_Validation", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, invoiceTypeParameter);
        }
    
        public virtual ObjectResult<Invoice_Re_Process_AddOnService_Result> Invoice_Re_Process_AddOnService(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, string customers)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var customersParameter = customers != null ?
                new ObjectParameter("Customers", customers) :
                new ObjectParameter("Customers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Invoice_Re_Process_AddOnService_Result>("Invoice_Re_Process_AddOnService", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, customersParameter);
        }
    
        public virtual int Invoice_Re_Process_storage(Nullable<System.DateTime> billDate, Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID, Nullable<int> createdBy, Nullable<bool> inCompanyName, string customers)
        {
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var inCompanyNameParameter = inCompanyName.HasValue ?
                new ObjectParameter("InCompanyName", inCompanyName) :
                new ObjectParameter("InCompanyName", typeof(bool));
    
            var customersParameter = customers != null ?
                new ObjectParameter("Customers", customers) :
                new ObjectParameter("Customers", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Invoice_Re_Process_storage", billDateParameter, billStartDateParameter, billEndDateParameter, warehouseIDParameter, createdByParameter, inCompanyNameParameter, customersParameter);
        }
    
        public virtual ObjectResult<string> Inward_Cancelled(Nullable<int> inwardID, Nullable<int> customerID, string remarks, Nullable<int> createdBy)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Inward_Cancelled", inwardIDParameter, customerIDParameter, remarksParameter, createdByParameter);
        }
    
        public virtual int Inward_Insert(Nullable<int> inwardID, Nullable<int> customerID, Nullable<int> companyID, Nullable<int> wareHouseID, Nullable<System.DateTime> inwardDate, Nullable<int> docID, Nullable<int> unloadingBy, Nullable<System.DateTime> billingStartDate, string personName, string remarks, Nullable<int> financialYearID, Nullable<int> createdBy, string receiptNo, string mode, Nullable<int> transferID, Nullable<int> storageAreaMasterID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var inwardDateParameter = inwardDate.HasValue ?
                new ObjectParameter("InwardDate", inwardDate) :
                new ObjectParameter("InwardDate", typeof(System.DateTime));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var unloadingByParameter = unloadingBy.HasValue ?
                new ObjectParameter("UnloadingBy", unloadingBy) :
                new ObjectParameter("UnloadingBy", typeof(int));
    
            var billingStartDateParameter = billingStartDate.HasValue ?
                new ObjectParameter("BillingStartDate", billingStartDate) :
                new ObjectParameter("BillingStartDate", typeof(System.DateTime));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var storageAreaMasterIDParameter = storageAreaMasterID.HasValue ?
                new ObjectParameter("StorageAreaMasterID", storageAreaMasterID) :
                new ObjectParameter("StorageAreaMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inward_Insert", inwardIDParameter, customerIDParameter, companyIDParameter, wareHouseIDParameter, inwardDateParameter, docIDParameter, unloadingByParameter, billingStartDateParameter, personNameParameter, remarksParameter, financialYearIDParameter, createdByParameter, receiptNoParameter, modeParameter, transferIDParameter, storageAreaMasterIDParameter);
        }
    
        public virtual int Inward_Insert_test(Nullable<int> inwardID, Nullable<int> customerID, Nullable<int> companyID, Nullable<int> wareHouseID, Nullable<System.DateTime> inwardDate, Nullable<int> docID, Nullable<int> unloadingBy, Nullable<System.DateTime> billingStartDate, string personName, string remarks, Nullable<int> financialYearID, Nullable<int> createdBy, string receiptNo, string mode, Nullable<int> transferID, Nullable<int> storageAreaMasterID, string json_InwardDetail, string json_InwardLocation, string json_InwardCharges, string json_InwardTransport)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var inwardDateParameter = inwardDate.HasValue ?
                new ObjectParameter("InwardDate", inwardDate) :
                new ObjectParameter("InwardDate", typeof(System.DateTime));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var unloadingByParameter = unloadingBy.HasValue ?
                new ObjectParameter("UnloadingBy", unloadingBy) :
                new ObjectParameter("UnloadingBy", typeof(int));
    
            var billingStartDateParameter = billingStartDate.HasValue ?
                new ObjectParameter("BillingStartDate", billingStartDate) :
                new ObjectParameter("BillingStartDate", typeof(System.DateTime));
    
            var personNameParameter = personName != null ?
                new ObjectParameter("PersonName", personName) :
                new ObjectParameter("PersonName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var receiptNoParameter = receiptNo != null ?
                new ObjectParameter("ReceiptNo", receiptNo) :
                new ObjectParameter("ReceiptNo", typeof(string));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var storageAreaMasterIDParameter = storageAreaMasterID.HasValue ?
                new ObjectParameter("StorageAreaMasterID", storageAreaMasterID) :
                new ObjectParameter("StorageAreaMasterID", typeof(int));
    
            var json_InwardDetailParameter = json_InwardDetail != null ?
                new ObjectParameter("Json_InwardDetail", json_InwardDetail) :
                new ObjectParameter("Json_InwardDetail", typeof(string));
    
            var json_InwardLocationParameter = json_InwardLocation != null ?
                new ObjectParameter("Json_InwardLocation", json_InwardLocation) :
                new ObjectParameter("Json_InwardLocation", typeof(string));
    
            var json_InwardChargesParameter = json_InwardCharges != null ?
                new ObjectParameter("Json_InwardCharges", json_InwardCharges) :
                new ObjectParameter("Json_InwardCharges", typeof(string));
    
            var json_InwardTransportParameter = json_InwardTransport != null ?
                new ObjectParameter("Json_InwardTransport", json_InwardTransport) :
                new ObjectParameter("Json_InwardTransport", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Inward_Insert_test", inwardIDParameter, customerIDParameter, companyIDParameter, wareHouseIDParameter, inwardDateParameter, docIDParameter, unloadingByParameter, billingStartDateParameter, personNameParameter, remarksParameter, financialYearIDParameter, createdByParameter, receiptNoParameter, modeParameter, transferIDParameter, storageAreaMasterIDParameter, json_InwardDetailParameter, json_InwardLocationParameter, json_InwardChargesParameter, json_InwardTransportParameter);
        }
    
        public virtual ObjectResult<string> InwardUpdate_insert(Nullable<int> inwardDID, Nullable<int> brandId, string itemsInPacket, Nullable<decimal> inQuantity, string lotno, string docID, string unLoadingBy, string remarks, string truckNo, string containerNo, Nullable<int> inwardID, Nullable<int> storageAreaID)
        {
            var inwardDIDParameter = inwardDID.HasValue ?
                new ObjectParameter("InwardDID", inwardDID) :
                new ObjectParameter("InwardDID", typeof(int));
    
            var brandIdParameter = brandId.HasValue ?
                new ObjectParameter("BrandId", brandId) :
                new ObjectParameter("BrandId", typeof(int));
    
            var itemsInPacketParameter = itemsInPacket != null ?
                new ObjectParameter("ItemsInPacket", itemsInPacket) :
                new ObjectParameter("ItemsInPacket", typeof(string));
    
            var inQuantityParameter = inQuantity.HasValue ?
                new ObjectParameter("InQuantity", inQuantity) :
                new ObjectParameter("InQuantity", typeof(decimal));
    
            var lotnoParameter = lotno != null ?
                new ObjectParameter("lotno", lotno) :
                new ObjectParameter("lotno", typeof(string));
    
            var docIDParameter = docID != null ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(string));
    
            var unLoadingByParameter = unLoadingBy != null ?
                new ObjectParameter("UnLoadingBy", unLoadingBy) :
                new ObjectParameter("UnLoadingBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("InwardUpdate_insert", inwardDIDParameter, brandIdParameter, itemsInPacketParameter, inQuantityParameter, lotnoParameter, docIDParameter, unLoadingByParameter, remarksParameter, truckNoParameter, containerNoParameter, inwardIDParameter, storageAreaIDParameter);
        }
    
        public virtual ObjectResult<string> Items_Insert_Update(Nullable<int> itemID, string itemCode, string itemName, Nullable<int> createdBy, Nullable<int> itemTypeID, Nullable<int> tempCategoryID, Nullable<bool> isActive)
        {
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var itemCodeParameter = itemCode != null ?
                new ObjectParameter("ItemCode", itemCode) :
                new ObjectParameter("ItemCode", typeof(string));
    
            var itemNameParameter = itemName != null ?
                new ObjectParameter("ItemName", itemName) :
                new ObjectParameter("ItemName", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var tempCategoryIDParameter = tempCategoryID.HasValue ?
                new ObjectParameter("TempCategoryID", tempCategoryID) :
                new ObjectParameter("TempCategoryID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Items_Insert_Update", itemIDParameter, itemCodeParameter, itemNameParameter, createdByParameter, itemTypeIDParameter, tempCategoryIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Items_Select_Result> Items_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Items_Select_Result>("Items_Select");
        }
    
        public virtual ObjectResult<string> ItemTypeMaster_Insert_Update(Nullable<int> itemTypeID, string itemTypeCode, string itemType)
        {
            var itemTypeIDParameter = itemTypeID.HasValue ?
                new ObjectParameter("ItemTypeID", itemTypeID) :
                new ObjectParameter("ItemTypeID", typeof(int));
    
            var itemTypeCodeParameter = itemTypeCode != null ?
                new ObjectParameter("ItemTypeCode", itemTypeCode) :
                new ObjectParameter("ItemTypeCode", typeof(string));
    
            var itemTypeParameter = itemType != null ?
                new ObjectParameter("ItemType", itemType) :
                new ObjectParameter("ItemType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ItemTypeMaster_Insert_Update", itemTypeIDParameter, itemTypeCodeParameter, itemTypeParameter);
        }
    
        public virtual ObjectResult<ItemTypeMaster_Select_Result> ItemTypeMaster_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ItemTypeMaster_Select_Result>("ItemTypeMaster_Select");
        }
    
        public virtual ObjectResult<string> LabourContractor_Insert_Update(Nullable<int> labourContractorID, string contractorName, string address1, string address2, string contactNo, string panCardNo, string licenceNo, Nullable<System.DateTime> dOJ, Nullable<int> createdBy, string bankName, string branch, string accountNo, string iFSCCode, string emailID, string gSTNo)
        {
            var labourContractorIDParameter = labourContractorID.HasValue ?
                new ObjectParameter("LabourContractorID", labourContractorID) :
                new ObjectParameter("LabourContractorID", typeof(int));
    
            var contractorNameParameter = contractorName != null ?
                new ObjectParameter("ContractorName", contractorName) :
                new ObjectParameter("ContractorName", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var contactNoParameter = contactNo != null ?
                new ObjectParameter("ContactNo", contactNo) :
                new ObjectParameter("ContactNo", typeof(string));
    
            var panCardNoParameter = panCardNo != null ?
                new ObjectParameter("PanCardNo", panCardNo) :
                new ObjectParameter("PanCardNo", typeof(string));
    
            var licenceNoParameter = licenceNo != null ?
                new ObjectParameter("LicenceNo", licenceNo) :
                new ObjectParameter("LicenceNo", typeof(string));
    
            var dOJParameter = dOJ.HasValue ?
                new ObjectParameter("DOJ", dOJ) :
                new ObjectParameter("DOJ", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var bankNameParameter = bankName != null ?
                new ObjectParameter("BankName", bankName) :
                new ObjectParameter("BankName", typeof(string));
    
            var branchParameter = branch != null ?
                new ObjectParameter("Branch", branch) :
                new ObjectParameter("Branch", typeof(string));
    
            var accountNoParameter = accountNo != null ?
                new ObjectParameter("AccountNo", accountNo) :
                new ObjectParameter("AccountNo", typeof(string));
    
            var iFSCCodeParameter = iFSCCode != null ?
                new ObjectParameter("IFSCCode", iFSCCode) :
                new ObjectParameter("IFSCCode", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var gSTNoParameter = gSTNo != null ?
                new ObjectParameter("GSTNo", gSTNo) :
                new ObjectParameter("GSTNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("LabourContractor_Insert_Update", labourContractorIDParameter, contractorNameParameter, address1Parameter, address2Parameter, contactNoParameter, panCardNoParameter, licenceNoParameter, dOJParameter, createdByParameter, bankNameParameter, branchParameter, accountNoParameter, iFSCCodeParameter, emailIDParameter, gSTNoParameter);
        }
    
        public virtual ObjectResult<LabourContractors_Select_Result> LabourContractors_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LabourContractors_Select_Result>("LabourContractors_Select");
        }
    
        public virtual ObjectResult<LotSearch_List_Result> LotSearch_List(string lotNo, Nullable<int> wareHouseID)
        {
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LotSearch_List_Result>("LotSearch_List", lotNoParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Order_Select_Result> Order_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Order_Select_Result>("Order_Select");
        }
    
        public virtual ObjectResult<Ordering_Select_Result> Ordering_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Ordering_Select_Result>("Ordering_Select");
        }
    
        public virtual ObjectResult<string> OutWard_Cancelled(Nullable<int> outWardID, Nullable<int> warehouseID, string remarks, Nullable<int> createdby)
        {
            var outWardIDParameter = outWardID.HasValue ?
                new ObjectParameter("OutWardID", outWardID) :
                new ObjectParameter("OutWardID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("Createdby", createdby) :
                new ObjectParameter("Createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("OutWard_Cancelled", outWardIDParameter, warehouseIDParameter, remarksParameter, createdbyParameter);
        }
    
        public virtual int Outward_Insert(Nullable<int> outwardID, Nullable<int> warehouseID, Nullable<System.DateTime> outWardDate, Nullable<System.DateTime> billStartDate, Nullable<int> deliveryOrderID, Nullable<int> customerPartyID, string truckNo, string containerNo, string transporterName, string remarks, Nullable<int> createdBy, Nullable<int> customerID, string driverName, string driverNo, Nullable<int> docID, Nullable<int> loadingBy, Nullable<int> transferID, Nullable<int> dispatchID)
        {
            var outwardIDParameter = outwardID.HasValue ?
                new ObjectParameter("OutwardID", outwardID) :
                new ObjectParameter("OutwardID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var outWardDateParameter = outWardDate.HasValue ?
                new ObjectParameter("OutWardDate", outWardDate) :
                new ObjectParameter("OutWardDate", typeof(System.DateTime));
    
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            var customerPartyIDParameter = customerPartyID.HasValue ?
                new ObjectParameter("CustomerPartyID", customerPartyID) :
                new ObjectParameter("CustomerPartyID", typeof(int));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var transporterNameParameter = transporterName != null ?
                new ObjectParameter("TransporterName", transporterName) :
                new ObjectParameter("TransporterName", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var driverNameParameter = driverName != null ?
                new ObjectParameter("DriverName", driverName) :
                new ObjectParameter("DriverName", typeof(string));
    
            var driverNoParameter = driverNo != null ?
                new ObjectParameter("DriverNo", driverNo) :
                new ObjectParameter("DriverNo", typeof(string));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var loadingByParameter = loadingBy.HasValue ?
                new ObjectParameter("LoadingBy", loadingBy) :
                new ObjectParameter("LoadingBy", typeof(int));
    
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Outward_Insert", outwardIDParameter, warehouseIDParameter, outWardDateParameter, billStartDateParameter, deliveryOrderIDParameter, customerPartyIDParameter, truckNoParameter, containerNoParameter, transporterNameParameter, remarksParameter, createdByParameter, customerIDParameter, driverNameParameter, driverNoParameter, docIDParameter, loadingByParameter, transferIDParameter, dispatchIDParameter);
        }
    
        public virtual ObjectResult<string> OutwardUpdate_insert(Nullable<int> outWardID, Nullable<int> docID, string truckNo, string containerNo, Nullable<int> loadingBy, Nullable<int> customerPartyID, string remarks, Nullable<int> labourContractorID, Nullable<int> customerID, Nullable<int> createdBy)
        {
            var outWardIDParameter = outWardID.HasValue ?
                new ObjectParameter("OutWardID", outWardID) :
                new ObjectParameter("OutWardID", typeof(int));
    
            var docIDParameter = docID.HasValue ?
                new ObjectParameter("DocID", docID) :
                new ObjectParameter("DocID", typeof(int));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var loadingByParameter = loadingBy.HasValue ?
                new ObjectParameter("LoadingBy", loadingBy) :
                new ObjectParameter("LoadingBy", typeof(int));
    
            var customerPartyIDParameter = customerPartyID.HasValue ?
                new ObjectParameter("CustomerPartyID", customerPartyID) :
                new ObjectParameter("CustomerPartyID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var labourContractorIDParameter = labourContractorID.HasValue ?
                new ObjectParameter("LabourContractorID", labourContractorID) :
                new ObjectParameter("LabourContractorID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("OutwardUpdate_insert", outWardIDParameter, docIDParameter, truckNoParameter, containerNoParameter, loadingByParameter, customerPartyIDParameter, remarksParameter, labourContractorIDParameter, customerIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Outword_CustomerParties_Result> Outword_CustomerParties(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Outword_CustomerParties_Result>("Outword_CustomerParties", customerIDParameter);
        }
    
        public virtual int P_UpdateStockRegister(Nullable<int> wareHouseID, Nullable<int> customerId, Nullable<int> productID, Nullable<int> inwardDID, string lotNo, Nullable<int> storageAreaID, Nullable<decimal> inQuantity, Nullable<decimal> dOQuantity, Nullable<decimal> outQuantity, Nullable<decimal> balanceQuantity, Nullable<int> processTypeID, Nullable<int> createdBy)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var customerIdParameter = customerId.HasValue ?
                new ObjectParameter("CustomerId", customerId) :
                new ObjectParameter("CustomerId", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var inwardDIDParameter = inwardDID.HasValue ?
                new ObjectParameter("InwardDID", inwardDID) :
                new ObjectParameter("InwardDID", typeof(int));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            var inQuantityParameter = inQuantity.HasValue ?
                new ObjectParameter("InQuantity", inQuantity) :
                new ObjectParameter("InQuantity", typeof(decimal));
    
            var dOQuantityParameter = dOQuantity.HasValue ?
                new ObjectParameter("DOQuantity", dOQuantity) :
                new ObjectParameter("DOQuantity", typeof(decimal));
    
            var outQuantityParameter = outQuantity.HasValue ?
                new ObjectParameter("OutQuantity", outQuantity) :
                new ObjectParameter("OutQuantity", typeof(decimal));
    
            var balanceQuantityParameter = balanceQuantity.HasValue ?
                new ObjectParameter("BalanceQuantity", balanceQuantity) :
                new ObjectParameter("BalanceQuantity", typeof(decimal));
    
            var processTypeIDParameter = processTypeID.HasValue ?
                new ObjectParameter("ProcessTypeID", processTypeID) :
                new ObjectParameter("ProcessTypeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("P_UpdateStockRegister", wareHouseIDParameter, customerIdParameter, productIDParameter, inwardDIDParameter, lotNoParameter, storageAreaIDParameter, inQuantityParameter, dOQuantityParameter, outQuantityParameter, balanceQuantityParameter, processTypeIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<string> PackingType_Insert_Update(Nullable<int> packingTypeID, string packingType, Nullable<bool> isActive)
        {
            var packingTypeIDParameter = packingTypeID.HasValue ?
                new ObjectParameter("PackingTypeID", packingTypeID) :
                new ObjectParameter("PackingTypeID", typeof(int));
    
            var packingTypeParameter = packingType != null ?
                new ObjectParameter("PackingType", packingType) :
                new ObjectParameter("PackingType", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("PackingType_Insert_Update", packingTypeIDParameter, packingTypeParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<PackingType_Select_Result> PackingType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PackingType_Select_Result>("PackingType_Select");
        }
    
        public virtual ObjectResult<string> Pellets_Insert(Nullable<int> pelletID, string pelletNumber, string barCode, Nullable<int> warehouseID, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var pelletIDParameter = pelletID.HasValue ?
                new ObjectParameter("PelletID", pelletID) :
                new ObjectParameter("PelletID", typeof(int));
    
            var pelletNumberParameter = pelletNumber != null ?
                new ObjectParameter("PelletNumber", pelletNumber) :
                new ObjectParameter("PelletNumber", typeof(string));
    
            var barCodeParameter = barCode != null ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(string));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Pellets_Insert", pelletIDParameter, pelletNumberParameter, barCodeParameter, warehouseIDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Pellets_List_Result> Pellets_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pellets_List_Result>("Pellets_List");
        }
    
        public virtual ObjectResult<string> Plugin_insert(Nullable<int> plugInID, Nullable<int> customerID, Nullable<int> labourcontractorID, Nullable<int> warehouseID, string truckNo, string containerNo, Nullable<System.DateTime> startTime, Nullable<System.DateTime> endTime, Nullable<int> totalHour, Nullable<int> createdBy, Nullable<int> rate)
        {
            var plugInIDParameter = plugInID.HasValue ?
                new ObjectParameter("PlugInID", plugInID) :
                new ObjectParameter("PlugInID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var labourcontractorIDParameter = labourcontractorID.HasValue ?
                new ObjectParameter("LabourcontractorID", labourcontractorID) :
                new ObjectParameter("LabourcontractorID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var truckNoParameter = truckNo != null ?
                new ObjectParameter("TruckNo", truckNo) :
                new ObjectParameter("TruckNo", typeof(string));
    
            var containerNoParameter = containerNo != null ?
                new ObjectParameter("ContainerNo", containerNo) :
                new ObjectParameter("ContainerNo", typeof(string));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var endTimeParameter = endTime.HasValue ?
                new ObjectParameter("EndTime", endTime) :
                new ObjectParameter("EndTime", typeof(System.DateTime));
    
            var totalHourParameter = totalHour.HasValue ?
                new ObjectParameter("TotalHour", totalHour) :
                new ObjectParameter("TotalHour", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Plugin_insert", plugInIDParameter, customerIDParameter, labourcontractorIDParameter, warehouseIDParameter, truckNoParameter, containerNoParameter, startTimeParameter, endTimeParameter, totalHourParameter, createdByParameter, rateParameter);
        }
    
        public virtual ObjectResult<PlugIn_Select_Result> PlugIn_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PlugIn_Select_Result>("PlugIn_Select");
        }
    
        public virtual ObjectResult<ProcessServices_Details_Result> ProcessServices_Details()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessServices_Details_Result>("ProcessServices_Details");
        }
    
        public virtual int ProcessServices_Insert(Nullable<int> processIDID, Nullable<int> createdBy, Nullable<int> processID)
        {
            var processIDIDParameter = processIDID.HasValue ?
                new ObjectParameter("ProcessIDID", processIDID) :
                new ObjectParameter("ProcessIDID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProcessServices_Insert", processIDIDParameter, createdByParameter, processIDParameter);
        }
    
        public virtual ObjectResult<ProcessServices_Select_Result> ProcessServices_Select(Nullable<int> processID)
        {
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProcessServices_Select_Result>("ProcessServices_Select", processIDParameter);
        }
    
        public virtual ObjectResult<Product_Select_Result> Product_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Product_Select_Result>("Product_Select");
        }
    
        public virtual ObjectResult<string> ProductMaster_Insert_Update(Nullable<int> productID, string productCode, string productName, Nullable<int> itemID, Nullable<int> productGroupID, Nullable<int> packingTypeID, Nullable<int> uOMID, Nullable<decimal> itemUnit, Nullable<int> itemCount, Nullable<int> productTypeID, Nullable<int> productTaxCategoryID, Nullable<int> temperatureCategoryID, Nullable<decimal> weightinKG, Nullable<decimal> width, Nullable<decimal> length, Nullable<decimal> height, Nullable<decimal> cubicArea, Nullable<int> selfLife, Nullable<bool> isActive, Nullable<int> createdBy, Nullable<int> approxValue, Nullable<int> billingCycleID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var productCodeParameter = productCode != null ?
                new ObjectParameter("ProductCode", productCode) :
                new ObjectParameter("ProductCode", typeof(string));
    
            var productNameParameter = productName != null ?
                new ObjectParameter("ProductName", productName) :
                new ObjectParameter("ProductName", typeof(string));
    
            var itemIDParameter = itemID.HasValue ?
                new ObjectParameter("ItemID", itemID) :
                new ObjectParameter("ItemID", typeof(int));
    
            var productGroupIDParameter = productGroupID.HasValue ?
                new ObjectParameter("ProductGroupID", productGroupID) :
                new ObjectParameter("ProductGroupID", typeof(int));
    
            var packingTypeIDParameter = packingTypeID.HasValue ?
                new ObjectParameter("PackingTypeID", packingTypeID) :
                new ObjectParameter("PackingTypeID", typeof(int));
    
            var uOMIDParameter = uOMID.HasValue ?
                new ObjectParameter("UOMID", uOMID) :
                new ObjectParameter("UOMID", typeof(int));
    
            var itemUnitParameter = itemUnit.HasValue ?
                new ObjectParameter("ItemUnit", itemUnit) :
                new ObjectParameter("ItemUnit", typeof(decimal));
    
            var itemCountParameter = itemCount.HasValue ?
                new ObjectParameter("ItemCount", itemCount) :
                new ObjectParameter("ItemCount", typeof(int));
    
            var productTypeIDParameter = productTypeID.HasValue ?
                new ObjectParameter("ProductTypeID", productTypeID) :
                new ObjectParameter("ProductTypeID", typeof(int));
    
            var productTaxCategoryIDParameter = productTaxCategoryID.HasValue ?
                new ObjectParameter("ProductTaxCategoryID", productTaxCategoryID) :
                new ObjectParameter("ProductTaxCategoryID", typeof(int));
    
            var temperatureCategoryIDParameter = temperatureCategoryID.HasValue ?
                new ObjectParameter("TemperatureCategoryID", temperatureCategoryID) :
                new ObjectParameter("TemperatureCategoryID", typeof(int));
    
            var weightinKGParameter = weightinKG.HasValue ?
                new ObjectParameter("WeightinKG", weightinKG) :
                new ObjectParameter("WeightinKG", typeof(decimal));
    
            var widthParameter = width.HasValue ?
                new ObjectParameter("Width", width) :
                new ObjectParameter("Width", typeof(decimal));
    
            var lengthParameter = length.HasValue ?
                new ObjectParameter("Length", length) :
                new ObjectParameter("Length", typeof(decimal));
    
            var heightParameter = height.HasValue ?
                new ObjectParameter("Height", height) :
                new ObjectParameter("Height", typeof(decimal));
    
            var cubicAreaParameter = cubicArea.HasValue ?
                new ObjectParameter("CubicArea", cubicArea) :
                new ObjectParameter("CubicArea", typeof(decimal));
    
            var selfLifeParameter = selfLife.HasValue ?
                new ObjectParameter("SelfLife", selfLife) :
                new ObjectParameter("SelfLife", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var approxValueParameter = approxValue.HasValue ?
                new ObjectParameter("ApproxValue", approxValue) :
                new ObjectParameter("ApproxValue", typeof(int));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductMaster_Insert_Update", productIDParameter, productCodeParameter, productNameParameter, itemIDParameter, productGroupIDParameter, packingTypeIDParameter, uOMIDParameter, itemUnitParameter, itemCountParameter, productTypeIDParameter, productTaxCategoryIDParameter, temperatureCategoryIDParameter, weightinKGParameter, widthParameter, lengthParameter, heightParameter, cubicAreaParameter, selfLifeParameter, isActiveParameter, createdByParameter, approxValueParameter, billingCycleIDParameter);
        }
    
        public virtual ObjectResult<string> ProductTaxCategory_Insert(Nullable<int> productTaxCategoryID, string productTaxCategory, Nullable<int> taxID, string hCNCode, Nullable<int> service, Nullable<System.DateTime> wefDate)
        {
            var productTaxCategoryIDParameter = productTaxCategoryID.HasValue ?
                new ObjectParameter("ProductTaxCategoryID", productTaxCategoryID) :
                new ObjectParameter("ProductTaxCategoryID", typeof(int));
    
            var productTaxCategoryParameter = productTaxCategory != null ?
                new ObjectParameter("ProductTaxCategory", productTaxCategory) :
                new ObjectParameter("ProductTaxCategory", typeof(string));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var hCNCodeParameter = hCNCode != null ?
                new ObjectParameter("HCNCode", hCNCode) :
                new ObjectParameter("HCNCode", typeof(string));
    
            var serviceParameter = service.HasValue ?
                new ObjectParameter("Service", service) :
                new ObjectParameter("Service", typeof(int));
    
            var wefDateParameter = wefDate.HasValue ?
                new ObjectParameter("WefDate", wefDate) :
                new ObjectParameter("WefDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ProductTaxCategory_Insert", productTaxCategoryIDParameter, productTaxCategoryParameter, taxIDParameter, hCNCodeParameter, serviceParameter, wefDateParameter);
        }
    
        public virtual ObjectResult<ProductTaxCategory_Select_Result> ProductTaxCategory_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductTaxCategory_Select_Result>("ProductTaxCategory_Select");
        }
    
        public virtual ObjectResult<ProductTaxDetail_Select_Result> ProductTaxDetail_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ProductTaxDetail_Select_Result>("ProductTaxDetail_Select");
        }
    
        public virtual int ProductTaxDetails_insert(Nullable<int> productTaxID, Nullable<int> taxID, Nullable<System.DateTime> wefDate, Nullable<int> createdBy, string hSNCode)
        {
            var productTaxIDParameter = productTaxID.HasValue ?
                new ObjectParameter("ProductTaxID", productTaxID) :
                new ObjectParameter("ProductTaxID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var wefDateParameter = wefDate.HasValue ?
                new ObjectParameter("WefDate", wefDate) :
                new ObjectParameter("WefDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var hSNCodeParameter = hSNCode != null ?
                new ObjectParameter("HSNCode", hSNCode) :
                new ObjectParameter("HSNCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ProductTaxDetails_insert", productTaxIDParameter, taxIDParameter, wefDateParameter, createdByParameter, hSNCodeParameter);
        }
    
        public virtual ObjectResult<string> Rate_Cancelled(Nullable<int> rateID)
        {
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Rate_Cancelled", rateIDParameter);
        }
    
        public virtual int Rate_Insert(Nullable<int> rateID, string rateCode, string rateDescription, Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> createdBy)
        {
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var rateCodeParameter = rateCode != null ?
                new ObjectParameter("RateCode", rateCode) :
                new ObjectParameter("RateCode", typeof(string));
    
            var rateDescriptionParameter = rateDescription != null ?
                new ObjectParameter("RateDescription", rateDescription) :
                new ObjectParameter("RateDescription", typeof(string));
    
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(System.DateTime));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rate_Insert", rateIDParameter, rateCodeParameter, rateDescriptionParameter, startDateParameter, endDateParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Rate_Product_Result> Rate_Product(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rate_Product_Result>("Rate_Product", productIDParameter);
        }
    
        public virtual ObjectResult<Rate_RateList_Result> Rate_RateList(Nullable<int> rateID)
        {
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rate_RateList_Result>("Rate_RateList", rateIDParameter);
        }
    
        public virtual ObjectResult<Rate_Select_Result> Rate_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rate_Select_Result>("Rate_Select");
        }
    
        public virtual ObjectResult<Rate_Services_Result> Rate_Services(Nullable<int> productID, Nullable<int> rateID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rate_Services_Result>("Rate_Services", productIDParameter, rateIDParameter);
        }
    
        public virtual ObjectResult<RateList_Customer_Result> RateList_Customer(Nullable<int> rateID, Nullable<int> productID)
        {
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RateList_Customer_Result>("RateList_Customer", rateIDParameter, productIDParameter);
        }
    
        public virtual int Ratelist_Insert(Nullable<int> rateListID, Nullable<int> rateID, Nullable<int> productID, Nullable<int> warehouseID, Nullable<int> taxID, Nullable<int> createdBy)
        {
            var rateListIDParameter = rateListID.HasValue ?
                new ObjectParameter("RateListID", rateListID) :
                new ObjectParameter("RateListID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Ratelist_Insert", rateListIDParameter, rateIDParameter, productIDParameter, warehouseIDParameter, taxIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<RateList_Select_Result> RateList_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RateList_Select_Result>("RateList_Select");
        }
    
        public virtual ObjectResult<ReceiprReco_GetDate_Result> ReceiprReco_GetDate(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReceiprReco_GetDate_Result>("ReceiprReco_GetDate", warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int Receipt_Insert(Nullable<int> receiptID, Nullable<int> warehouseID, Nullable<System.DateTime> receiptDate, Nullable<decimal> amount, Nullable<decimal> tDSAmount, Nullable<int> receiptTypeID, Nullable<int> createdBy)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var receiptDateParameter = receiptDate.HasValue ?
                new ObjectParameter("ReceiptDate", receiptDate) :
                new ObjectParameter("ReceiptDate", typeof(System.DateTime));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("Amount", amount) :
                new ObjectParameter("Amount", typeof(decimal));
    
            var tDSAmountParameter = tDSAmount.HasValue ?
                new ObjectParameter("TDSAmount", tDSAmount) :
                new ObjectParameter("TDSAmount", typeof(decimal));
    
            var receiptTypeIDParameter = receiptTypeID.HasValue ?
                new ObjectParameter("ReceiptTypeID", receiptTypeID) :
                new ObjectParameter("ReceiptTypeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Receipt_Insert", receiptIDParameter, warehouseIDParameter, receiptDateParameter, amountParameter, tDSAmountParameter, receiptTypeIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Receipt_SelectInvoice_Result> Receipt_SelectInvoice(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<int> receiptType)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var receiptTypeParameter = receiptType.HasValue ?
                new ObjectParameter("ReceiptType", receiptType) :
                new ObjectParameter("ReceiptType", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Receipt_SelectInvoice_Result>("Receipt_SelectInvoice", customerIDParameter, warehouseIDParameter, receiptTypeParameter);
        }
    
        public virtual ObjectResult<string> ReceiptReco_insert(Nullable<int> receiptRecoID, Nullable<int> receiptDID, Nullable<int> statusID, string remark, Nullable<System.DateTime> clearBounceDate)
        {
            var receiptRecoIDParameter = receiptRecoID.HasValue ?
                new ObjectParameter("ReceiptRecoID", receiptRecoID) :
                new ObjectParameter("ReceiptRecoID", typeof(int));
    
            var receiptDIDParameter = receiptDID.HasValue ?
                new ObjectParameter("ReceiptDID", receiptDID) :
                new ObjectParameter("ReceiptDID", typeof(int));
    
            var statusIDParameter = statusID.HasValue ?
                new ObjectParameter("StatusID", statusID) :
                new ObjectParameter("StatusID", typeof(int));
    
            var remarkParameter = remark != null ?
                new ObjectParameter("Remark", remark) :
                new ObjectParameter("Remark", typeof(string));
    
            var clearBounceDateParameter = clearBounceDate.HasValue ?
                new ObjectParameter("ClearBounceDate", clearBounceDate) :
                new ObjectParameter("ClearBounceDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ReceiptReco_insert", receiptRecoIDParameter, receiptDIDParameter, statusIDParameter, remarkParameter, clearBounceDateParameter);
        }
    
        public virtual ObjectResult<ReleaseDeliveryOrder_List_Result> ReleaseDeliveryOrder_List(Nullable<int> waherhouseID)
        {
            var waherhouseIDParameter = waherhouseID.HasValue ?
                new ObjectParameter("WaherhouseID", waherhouseID) :
                new ObjectParameter("WaherhouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReleaseDeliveryOrder_List_Result>("ReleaseDeliveryOrder_List", waherhouseIDParameter);
        }
    
        public virtual ObjectResult<string> Remarks_insert(Nullable<int> remarksID, string remarks, Nullable<int> processID, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var remarksIDParameter = remarksID.HasValue ?
                new ObjectParameter("RemarksID", remarksID) :
                new ObjectParameter("RemarksID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var processIDParameter = processID.HasValue ?
                new ObjectParameter("ProcessID", processID) :
                new ObjectParameter("ProcessID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Remarks_insert", remarksIDParameter, remarksParameter, processIDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Remarks_List_Result> Remarks_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remarks_List_Result>("Remarks_List");
        }
    
        public virtual ObjectResult<Remarks_Select_Result> Remarks_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Remarks_Select_Result>("Remarks_Select");
        }
    
        public virtual int Rep_AdditionalServiceDateWise_Labour(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_AdditionalServiceDateWise_Labour", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_AdditionalServiceDateWise_Storage(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_AdditionalServiceDateWise_Storage", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<Rep_AdditionalServiceList_Result> Rep_AdditionalServiceList(Nullable<int> customerID, Nullable<int> additionalServiceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var additionalServiceIDParameter = additionalServiceID.HasValue ?
                new ObjectParameter("AdditionalServiceID", additionalServiceID) :
                new ObjectParameter("AdditionalServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_AdditionalServiceList_Result>("Rep_AdditionalServiceList", customerIDParameter, additionalServiceIDParameter);
        }
    
        public virtual ObjectResult<Rep_AdditionalServiceList_Labour_Result> Rep_AdditionalServiceList_Labour(Nullable<int> customerID, Nullable<int> additionalServiceID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var additionalServiceIDParameter = additionalServiceID.HasValue ?
                new ObjectParameter("AdditionalServiceID", additionalServiceID) :
                new ObjectParameter("AdditionalServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_AdditionalServiceList_Labour_Result>("Rep_AdditionalServiceList_Labour", customerIDParameter, additionalServiceIDParameter);
        }
    
        public virtual int REP_AverageOccupancy(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_AverageOccupancy", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_Barcode_Result> Rep_Barcode(Nullable<int> challanID)
        {
            var challanIDParameter = challanID.HasValue ?
                new ObjectParameter("ChallanID", challanID) :
                new ObjectParameter("ChallanID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_Barcode_Result>("Rep_Barcode", challanIDParameter);
        }
    
        public virtual ObjectResult<Rep_BillPrint_Labour_Result> Rep_BillPrint_Labour(Nullable<int> warehouseID, Nullable<System.DateTime> billDate, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var billDateParameter = billDate.HasValue ?
                new ObjectParameter("BillDate", billDate) :
                new ObjectParameter("BillDate", typeof(System.DateTime));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_BillPrint_Labour_Result>("Rep_BillPrint_Labour", warehouseIDParameter, billDateParameter, customerIDParameter);
        }
    
        public virtual int Rep_BillPrint_Storage(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_BillPrint_Storage", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_BrandCountWiseStock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_BrandCountWiseStock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ChallanBarCode(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ChallanBarCode", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_CompanyInvoiceBill(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_CompanyInvoiceBill", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int rep_containerwisebill(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rep_containerwisebill", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ContainerWiseInward(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ContainerWiseInward", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int REP_ContainerWiseStockRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_ContainerWiseStockRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_CreditNote(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_CreditNote", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<REP_CurrentStock_Result> REP_CurrentStock(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REP_CurrentStock_Result>("REP_CurrentStock", warehouseIDParameter);
        }
    
        public virtual int Rep_Customer(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Customer", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_CustomerLogInHistory(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_CustomerLogInHistory", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<REP_CustomerStockReport_Result> REP_CustomerStockReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REP_CustomerStockReport_Result>("REP_CustomerStockReport");
        }
    
        public virtual ObjectResult<Rep_CustomerstockWeb_Result> Rep_CustomerstockWeb(Nullable<int> customerID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_CustomerstockWeb_Result>("Rep_CustomerstockWeb", customerIDParameter);
        }
    
        public virtual ObjectResult<Rep_DeliveryOrder_Result> Rep_DeliveryOrder(Nullable<int> deliveryOrderID)
        {
            var deliveryOrderIDParameter = deliveryOrderID.HasValue ?
                new ObjectParameter("DeliveryOrderID", deliveryOrderID) :
                new ObjectParameter("DeliveryOrderID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_DeliveryOrder_Result>("Rep_DeliveryOrder", deliveryOrderIDParameter);
        }
    
        public virtual int Rep_DeliveryOrderList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_DeliveryOrderList", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_Dispatch_Result> Rep_Dispatch(Nullable<int> dispatchID)
        {
            var dispatchIDParameter = dispatchID.HasValue ?
                new ObjectParameter("DispatchID", dispatchID) :
                new ObjectParameter("DispatchID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_Dispatch_Result>("Rep_Dispatch", dispatchIDParameter);
        }
    
        public virtual int Rep_EmailNotificationReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_EmailNotificationReport", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_ExportReceipt_Result> Rep_ExportReceipt(Nullable<int> exportID)
        {
            var exportIDParameter = exportID.HasValue ?
                new ObjectParameter("ExportID", exportID) :
                new ObjectParameter("ExportID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_ExportReceipt_Result>("Rep_ExportReceipt", exportIDParameter);
        }
    
        public virtual ObjectResult<Rep_GatePass_Result> Rep_GatePass(Nullable<int> outwardID, Nullable<int> warehouseID)
        {
            var outwardIDParameter = outwardID.HasValue ?
                new ObjectParameter("OutwardID", outwardID) :
                new ObjectParameter("OutwardID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_GatePass_Result>("Rep_GatePass", outwardIDParameter, warehouseIDParameter);
        }
    
        public virtual ObjectResult<Rep_GatePass_Email_Result> Rep_GatePass_Email(Nullable<int> outwardID, Nullable<int> warehouseID)
        {
            var outwardIDParameter = outwardID.HasValue ?
                new ObjectParameter("OutwardID", outwardID) :
                new ObjectParameter("OutwardID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_GatePass_Email_Result>("Rep_GatePass_Email", outwardIDParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_GetPassRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_GetPassRegister", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_GetStorageAreaOccupancy_Customer(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_GetStorageAreaOccupancy_Customer", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_GrtStorageAreaOccupancyCustomer_Web_Result> Rep_GrtStorageAreaOccupancyCustomer_Web(Nullable<int> customerID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_GrtStorageAreaOccupancyCustomer_Web_Result>("Rep_GrtStorageAreaOccupancyCustomer_Web", customerIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int Rep_Invoice_Estimate_Labour(Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID)
        {
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Invoice_Estimate_Labour", billStartDateParameter, billEndDateParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_Invoice_Estimate_storage(Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID)
        {
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Invoice_Estimate_storage", billStartDateParameter, billEndDateParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_Invoice_Estimate_storage_summary(Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID)
        {
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Invoice_Estimate_storage_summary", billStartDateParameter, billEndDateParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_Invoice_Estimate_storage1(Nullable<System.DateTime> billStartDate, Nullable<System.DateTime> billEndDate, Nullable<int> warehouseID)
        {
            var billStartDateParameter = billStartDate.HasValue ?
                new ObjectParameter("BillStartDate", billStartDate) :
                new ObjectParameter("BillStartDate", typeof(System.DateTime));
    
            var billEndDateParameter = billEndDate.HasValue ?
                new ObjectParameter("BillEndDate", billEndDate) :
                new ObjectParameter("BillEndDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Invoice_Estimate_storage1", billStartDateParameter, billEndDateParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_InvoiceSummary(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_InvoiceSummary", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_InwardBarcode_Result> Rep_InwardBarcode(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_InwardBarcode_Result>("Rep_InwardBarcode", inwardIDParameter);
        }
    
        public virtual int Rep_InwardLotwiseBarcode(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_InwardLotwiseBarcode", inwardIDParameter);
        }
    
        public virtual int Rep_InwardReports(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_InwardReports", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_InwardReports_Email(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_InwardReports_Email", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_InwardSend_Email_Result> Rep_InwardSend_Email(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_InwardSend_Email_Result>("Rep_InwardSend_Email", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual int Rep_InwardStock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_InwardStock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_LabelCustomer(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LabelCustomer", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_LabourCharges(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LabourCharges", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_LabourChargesPati_Result> Rep_LabourChargesPati(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_LabourChargesPati_Result>("Rep_LabourChargesPati", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_LabourInvoiceBill(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LabourInvoiceBill", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_LabourInvoiceSummary(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LabourInvoiceSummary", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_LabourPati(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LabourPati", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_LocationWise_Stock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LocationWise_Stock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_LocationWisePendingDO(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LocationWisePendingDO", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_LocationWiseStock_Result> Rep_LocationWiseStock(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_LocationWiseStock_Result>("Rep_LocationWiseStock", warehouseIDParameter);
        }
    
        public virtual int Rep_LogReportDetail(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LogReportDetail", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_LogReportSummary(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_LogReportSummary", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int rep_LotNoWisebill(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("rep_LotNoWisebill", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_MaterialReceipt_Result> Rep_MaterialReceipt(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_MaterialReceipt_Result>("Rep_MaterialReceipt", inwardIDParameter);
        }
    
        public virtual ObjectResult<Rep_MaterialReceipt_Email_Result> Rep_MaterialReceipt_Email(Nullable<int> inwardID)
        {
            var inwardIDParameter = inwardID.HasValue ?
                new ObjectParameter("InwardID", inwardID) :
                new ObjectParameter("InwardID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_MaterialReceipt_Email_Result>("Rep_MaterialReceipt_Email", inwardIDParameter);
        }
    
        public virtual int REP_OutStandingBillReport_Labour(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_OutStandingBillReport_Labour", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int REP_OutStandingBillReport_Storage(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_OutStandingBillReport_Storage", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_OutwardRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_OutwardRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_OutwardRegister_Email(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_OutwardRegister_Email", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_OutwardSend_Email_Result> Rep_OutwardSend_Email(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_OutwardSend_Email_Result>("Rep_OutwardSend_Email", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual int Rep_Outwardstock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Outwardstock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<Rep_PaymentReceiptReport_Result> Rep_PaymentReceiptReport(Nullable<int> receiptID, Nullable<int> warehouseID)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_PaymentReceiptReport_Result>("Rep_PaymentReceiptReport", receiptIDParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_PendingDO_Email(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PendingDO_Email", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_PendingDOReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PendingDOReport", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_PendingDOSend_Email_Result> Rep_PendingDOSend_Email(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_PendingDOSend_Email_Result>("Rep_PendingDOSend_Email", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual int Rep_PendingStock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PendingStock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_PendingStock_Email(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PendingStock_Email", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual ObjectResult<Rep_PendingStockSend_Email_Result> Rep_PendingStockSend_Email(Nullable<int> warehouseID, Nullable<int> customerID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_PendingStockSend_Email_Result>("Rep_PendingStockSend_Email", warehouseIDParameter, customerIDParameter);
        }
    
        public virtual int Rep_PlainInvoiceBill_LaboureWise(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PlainInvoiceBill_LaboureWise", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_PlainInvoiceBill_StorageWise(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_PlainInvoiceBill_StorageWise", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_PlugInReceipt_Result> Rep_PlugInReceipt(Nullable<int> plugInID, Nullable<int> warehouseID)
        {
            var plugInIDParameter = plugInID.HasValue ?
                new ObjectParameter("PlugInID", plugInID) :
                new ObjectParameter("PlugInID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("warehouseID", warehouseID) :
                new ObjectParameter("warehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_PlugInReceipt_Result>("Rep_PlugInReceipt", plugInIDParameter, warehouseIDParameter);
        }
    
        public virtual int Rep_ProductExpiry(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ProductExpiry", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ProductRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ProductRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ProductStockRep_CustomerWise(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ProductStockRep_CustomerWise", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ProductSummaryReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ProductSummaryReport", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int REP_ProductWiseBillingReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_ProductWiseBillingReport", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ProductWiseStock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ProductWiseStock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_R_LotRagister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_R_LotRagister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_R_LotRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_R_LotRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ReceiptRecoBounceList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ReceiptRecoBounceList", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ReceiptRecoClearList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ReceiptRecoClearList", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ReceiptReport_LabourWise(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ReceiptReport_LabourWise", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_ReceiptReport_StorageWise(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ReceiptReport_StorageWise", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_ReceiptUnclearList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ReceiptUnclearList", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_RepackingRegisterReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromdate, Nullable<System.DateTime> todate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromdateParameter = fromdate.HasValue ?
                new ObjectParameter("Fromdate", fromdate) :
                new ObjectParameter("Fromdate", typeof(System.DateTime));
    
            var todateParameter = todate.HasValue ?
                new ObjectParameter("Todate", todate) :
                new ObjectParameter("Todate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_RepackingRegisterReport", reportIDParameter, warehouseIDParameter, fromdateParameter, todateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_RepackingReport_Result> Rep_RepackingReport(Nullable<int> repackingID)
        {
            var repackingIDParameter = repackingID.HasValue ?
                new ObjectParameter("RepackingID", repackingID) :
                new ObjectParameter("RepackingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_RepackingReport_Result>("Rep_RepackingReport", repackingIDParameter);
        }
    
        public virtual ObjectResult<Rep_Shifting_Result> Rep_Shifting(Nullable<int> shiftingID)
        {
            var shiftingIDParameter = shiftingID.HasValue ?
                new ObjectParameter("ShiftingID", shiftingID) :
                new ObjectParameter("ShiftingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_Shifting_Result>("Rep_Shifting", shiftingIDParameter);
        }
    
        public virtual ObjectResult<REP_ShiftingDetails_Result> REP_ShiftingDetails(Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<REP_ShiftingDetails_Result>("REP_ShiftingDetails", warehouseIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual int Rep_ShitingSlip(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_ShitingSlip", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_SlowMovingGoods(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_SlowMovingGoods", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_SlowMovingGoods_List(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_SlowMovingGoods_List", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_SMSNotificationList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_SMSNotificationList", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_SMSNotificationReport(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_SMSNotificationReport", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_Stock(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Stock", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int REP_StockRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("REP_StockRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_Storage_LabourBillSummary(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Storage_LabourBillSummary", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_Storage_LabourBillSummary_all(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_Storage_LabourBillSummary_all", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_StorageAreaOccupancy(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_StorageAreaOccupancy", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_StorageAreaOccupancy_Email_Result> Rep_StorageAreaOccupancy_Email(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_StorageAreaOccupancy_Email_Result>("Rep_StorageAreaOccupancy_Email", warehouseIDParameter);
        }
    
        public virtual int Rep_StorageInvoiceBill(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo, Nullable<int> invoiceTypeID)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            var invoiceTypeIDParameter = invoiceTypeID.HasValue ?
                new ObjectParameter("InvoiceTypeID", invoiceTypeID) :
                new ObjectParameter("InvoiceTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_StorageInvoiceBill", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter, invoiceTypeIDParameter);
        }
    
        public virtual int Rep_StorageLocationCharges(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_StorageLocationCharges", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_StorageReceiptRegister(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_StorageReceiptRegister", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_Testing_Result> Rep_Testing()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_Testing_Result>("Rep_Testing");
        }
    
        public virtual ObjectResult<Rep_Testingsubreport_Result> Rep_Testingsubreport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_Testingsubreport_Result>("Rep_Testingsubreport");
        }
    
        public virtual int Rep_TransferDetails(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_TransferDetails", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual int Rep_TransferDetailsList(Nullable<int> reportID, Nullable<int> warehouseID, Nullable<System.DateTime> fromDate, Nullable<System.DateTime> toDate, Nullable<System.DateTime> asonDate, string lotNo)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var fromDateParameter = fromDate.HasValue ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(System.DateTime));
    
            var toDateParameter = toDate.HasValue ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(System.DateTime));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            var lotNoParameter = lotNo != null ?
                new ObjectParameter("LotNo", lotNo) :
                new ObjectParameter("LotNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Rep_TransferDetailsList", reportIDParameter, warehouseIDParameter, fromDateParameter, toDateParameter, asonDateParameter, lotNoParameter);
        }
    
        public virtual ObjectResult<Rep_TransferReport_Result> Rep_TransferReport(Nullable<int> transferID)
        {
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_TransferReport_Result>("Rep_TransferReport", transferIDParameter);
        }
    
        public virtual ObjectResult<Rep_WebCustomerLogInHistory_Result> Rep_WebCustomerLogInHistory(Nullable<int> customerID, Nullable<int> warehouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rep_WebCustomerLogInHistory_Result>("Rep_WebCustomerLogInHistory", customerIDParameter, warehouseIDParameter);
        }
    
        public virtual int Repacking_Insert(Nullable<int> repackingID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<System.DateTime> repackingDate, string orderGivenBy, string remarks, Nullable<int> createdBy, Nullable<int> financialYearID)
        {
            var repackingIDParameter = repackingID.HasValue ?
                new ObjectParameter("RepackingID", repackingID) :
                new ObjectParameter("RepackingID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var repackingDateParameter = repackingDate.HasValue ?
                new ObjectParameter("RepackingDate", repackingDate) :
                new ObjectParameter("RepackingDate", typeof(System.DateTime));
    
            var orderGivenByParameter = orderGivenBy != null ?
                new ObjectParameter("OrderGivenBy", orderGivenBy) :
                new ObjectParameter("OrderGivenBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Repacking_Insert", repackingIDParameter, warehouseIDParameter, customerIDParameter, repackingDateParameter, orderGivenByParameter, remarksParameter, createdByParameter, financialYearIDParameter);
        }
    
        public virtual ObjectResult<Repacking_List_Result> Repacking_List(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Repacking_List_Result>("Repacking_List", warehouseIDParameter);
        }
    
        public virtual ObjectResult<ReportDesigner_select_Result> ReportDesigner_select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportDesigner_select_Result>("ReportDesigner_select");
        }
    
        public virtual ObjectResult<string> ReportPrint_InfoUpdate(Nullable<int> reportID, string printerName, string pageSize, string oriantation, Nullable<decimal> topMargin, Nullable<decimal> leftMargin, Nullable<decimal> bottomMargin, Nullable<decimal> rightMargin)
        {
            var reportIDParameter = reportID.HasValue ?
                new ObjectParameter("ReportID", reportID) :
                new ObjectParameter("ReportID", typeof(int));
    
            var printerNameParameter = printerName != null ?
                new ObjectParameter("PrinterName", printerName) :
                new ObjectParameter("PrinterName", typeof(string));
    
            var pageSizeParameter = pageSize != null ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(string));
    
            var oriantationParameter = oriantation != null ?
                new ObjectParameter("Oriantation", oriantation) :
                new ObjectParameter("Oriantation", typeof(string));
    
            var topMarginParameter = topMargin.HasValue ?
                new ObjectParameter("TopMargin", topMargin) :
                new ObjectParameter("TopMargin", typeof(decimal));
    
            var leftMarginParameter = leftMargin.HasValue ?
                new ObjectParameter("LeftMargin", leftMargin) :
                new ObjectParameter("LeftMargin", typeof(decimal));
    
            var bottomMarginParameter = bottomMargin.HasValue ?
                new ObjectParameter("BottomMargin", bottomMargin) :
                new ObjectParameter("BottomMargin", typeof(decimal));
    
            var rightMarginParameter = rightMargin.HasValue ?
                new ObjectParameter("RightMargin", rightMargin) :
                new ObjectParameter("RightMargin", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ReportPrint_InfoUpdate", reportIDParameter, printerNameParameter, pageSizeParameter, oriantationParameter, topMarginParameter, leftMarginParameter, bottomMarginParameter, rightMarginParameter);
        }
    
        public virtual ObjectResult<ReportPrintInfo_Select_Result> ReportPrintInfo_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ReportPrintInfo_Select_Result>("ReportPrintInfo_Select");
        }
    
        public virtual ObjectResult<string> RichText_Insert(Nullable<int> richTextID, byte[] richTextContent)
        {
            var richTextIDParameter = richTextID.HasValue ?
                new ObjectParameter("RichTextID", richTextID) :
                new ObjectParameter("RichTextID", typeof(int));
    
            var richTextContentParameter = richTextContent != null ?
                new ObjectParameter("RichTextContent", richTextContent) :
                new ObjectParameter("RichTextContent", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("RichText_Insert", richTextIDParameter, richTextContentParameter);
        }
    
        public virtual int RoleUI_Insert_Update(Nullable<int> roleID, Nullable<int> createdBy)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleUI_Insert_Update", roleIDParameter, createdByParameter);
        }
    
        public virtual int RoleUI_RoleReport(Nullable<int> roleReportID, Nullable<int> roleID)
        {
            var roleReportIDParameter = roleReportID.HasValue ?
                new ObjectParameter("RoleReportID", roleReportID) :
                new ObjectParameter("RoleReportID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleUI_RoleReport", roleReportIDParameter, roleIDParameter);
        }
    
        public virtual int RoleUI_Select(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RoleUI_Select", roleIDParameter);
        }
    
        public virtual ObjectResult<RoleUI_SelectReport_Result> RoleUI_SelectReport()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RoleUI_SelectReport_Result>("RoleUI_SelectReport");
        }
    
        public virtual ObjectResult<Select_AllReports_Result> Select_AllReports(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_AllReports_Result>("Select_AllReports", userIDParameter);
        }
    
        public virtual ObjectResult<Select_CheckListMaster_Result> Select_CheckListMaster()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_CheckListMaster_Result>("Select_CheckListMaster");
        }
    
        public virtual ObjectResult<Select_Report_Result> Select_Report(string url)
        {
            var urlParameter = url != null ?
                new ObjectParameter("Url", url) :
                new ObjectParameter("Url", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Select_Report_Result>("Select_Report", urlParameter);
        }
    
        public virtual ObjectResult<Service_Select_Result> Service_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Service_Select_Result>("Service_Select");
        }
    
        public virtual ObjectResult<string> Services_Insert(Nullable<int> serviceID, string serviceCode, string serviceName, Nullable<int> serviceTypeID, string hCNCode, Nullable<int> billingCycleID, Nullable<int> storageAreaTypeID, Nullable<bool> isActive, Nullable<int> taxID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            var serviceCodeParameter = serviceCode != null ?
                new ObjectParameter("ServiceCode", serviceCode) :
                new ObjectParameter("ServiceCode", typeof(string));
    
            var serviceNameParameter = serviceName != null ?
                new ObjectParameter("ServiceName", serviceName) :
                new ObjectParameter("ServiceName", typeof(string));
    
            var serviceTypeIDParameter = serviceTypeID.HasValue ?
                new ObjectParameter("ServiceTypeID", serviceTypeID) :
                new ObjectParameter("ServiceTypeID", typeof(int));
    
            var hCNCodeParameter = hCNCode != null ?
                new ObjectParameter("HCNCode", hCNCode) :
                new ObjectParameter("HCNCode", typeof(string));
    
            var billingCycleIDParameter = billingCycleID.HasValue ?
                new ObjectParameter("BillingCycleID", billingCycleID) :
                new ObjectParameter("BillingCycleID", typeof(int));
    
            var storageAreaTypeIDParameter = storageAreaTypeID.HasValue ?
                new ObjectParameter("StorageAreaTypeID", storageAreaTypeID) :
                new ObjectParameter("StorageAreaTypeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Services_Insert", serviceIDParameter, serviceCodeParameter, serviceNameParameter, serviceTypeIDParameter, hCNCodeParameter, billingCycleIDParameter, storageAreaTypeIDParameter, isActiveParameter, taxIDParameter);
        }
    
        public virtual ObjectResult<ServiesCharges_List_Result> ServiesCharges_List(Nullable<int> serviceID)
        {
            var serviceIDParameter = serviceID.HasValue ?
                new ObjectParameter("ServiceID", serviceID) :
                new ObjectParameter("ServiceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ServiesCharges_List_Result>("ServiesCharges_List", serviceIDParameter);
        }
    
        public virtual int ServiesStorageAreaTypeID_select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ServiesStorageAreaTypeID_select");
        }
    
        public virtual ObjectResult<string> Shifting_Cancelled(Nullable<int> shiftingID, Nullable<int> shiftingDID, string remarks, Nullable<int> createdBy, Nullable<int> warehouseID)
        {
            var shiftingIDParameter = shiftingID.HasValue ?
                new ObjectParameter("ShiftingID", shiftingID) :
                new ObjectParameter("ShiftingID", typeof(int));
    
            var shiftingDIDParameter = shiftingDID.HasValue ?
                new ObjectParameter("ShiftingDID", shiftingDID) :
                new ObjectParameter("ShiftingDID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Shifting_Cancelled", shiftingIDParameter, shiftingDIDParameter, remarksParameter, createdByParameter, warehouseIDParameter);
        }
    
        public virtual int Shifting_insert(Nullable<int> shiftingID, Nullable<int> warehouseID, Nullable<int> customerID, Nullable<int> createdBy, Nullable<System.DateTime> shiftingDate, Nullable<int> loadingBy)
        {
            var shiftingIDParameter = shiftingID.HasValue ?
                new ObjectParameter("ShiftingID", shiftingID) :
                new ObjectParameter("ShiftingID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var shiftingDateParameter = shiftingDate.HasValue ?
                new ObjectParameter("ShiftingDate", shiftingDate) :
                new ObjectParameter("ShiftingDate", typeof(System.DateTime));
    
            var loadingByParameter = loadingBy.HasValue ?
                new ObjectParameter("LoadingBy", loadingBy) :
                new ObjectParameter("LoadingBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Shifting_insert", shiftingIDParameter, warehouseIDParameter, customerIDParameter, createdByParameter, shiftingDateParameter, loadingByParameter);
        }
    
        public virtual ObjectResult<Shifting_List_Result> Shifting_List(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Shifting_List_Result>("Shifting_List", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<Shifting_services_Result> Shifting_services()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Shifting_services_Result>("Shifting_services");
        }
    
        public virtual ObjectResult<ShiftingEdit_List_Result> ShiftingEdit_List(Nullable<int> shiftingID, Nullable<int> shiftingDID, Nullable<int> warehouseID)
        {
            var shiftingIDParameter = shiftingID.HasValue ?
                new ObjectParameter("ShiftingID", shiftingID) :
                new ObjectParameter("ShiftingID", typeof(int));
    
            var shiftingDIDParameter = shiftingDID.HasValue ?
                new ObjectParameter("ShiftingDID", shiftingDID) :
                new ObjectParameter("ShiftingDID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ShiftingEdit_List_Result>("ShiftingEdit_List", shiftingIDParameter, shiftingDIDParameter, warehouseIDParameter);
        }
    
        public virtual int SMS_Notification_Insert(string process, Nullable<int> referanceID)
        {
            var processParameter = process != null ?
                new ObjectParameter("Process", process) :
                new ObjectParameter("Process", typeof(string));
    
            var referanceIDParameter = referanceID.HasValue ?
                new ObjectParameter("ReferanceID", referanceID) :
                new ObjectParameter("ReferanceID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SMS_Notification_Insert", processParameter, referanceIDParameter);
        }
    
        public virtual ObjectResult<SMSNotification_Select_Result> SMSNotification_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SMSNotification_Select_Result>("SMSNotification_Select");
        }
    
        public virtual int SMSNotification_Update(Nullable<int> sMSNotificationID, string response)
        {
            var sMSNotificationIDParameter = sMSNotificationID.HasValue ?
                new ObjectParameter("SMSNotificationID", sMSNotificationID) :
                new ObjectParameter("SMSNotificationID", typeof(int));
    
            var responseParameter = response != null ?
                new ObjectParameter("Response", response) :
                new ObjectParameter("Response", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SMSNotification_Update", sMSNotificationIDParameter, responseParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_CustomerLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CustomerLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<SP_Login_Result> SP_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Login_Result>("SP_Login", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_ManagementLogin(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ManagementLogin", userNameParameter, passwordParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<string> States_insert(Nullable<int> stateID, string state, string stateCode, Nullable<int> createdBy, string gstCode)
        {
            var stateIDParameter = stateID.HasValue ?
                new ObjectParameter("StateID", stateID) :
                new ObjectParameter("StateID", typeof(int));
    
            var stateParameter = state != null ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(string));
    
            var stateCodeParameter = stateCode != null ?
                new ObjectParameter("StateCode", stateCode) :
                new ObjectParameter("StateCode", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var gstCodeParameter = gstCode != null ?
                new ObjectParameter("GstCode", gstCode) :
                new ObjectParameter("GstCode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("States_insert", stateIDParameter, stateParameter, stateCodeParameter, createdByParameter, gstCodeParameter);
        }
    
        public virtual ObjectResult<States_Select_Result> States_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<States_Select_Result>("States_Select");
        }
    
        public virtual int StockAudit_insert(Nullable<int> stockCheckingID, Nullable<System.DateTime> stockDate, Nullable<int> warehouseID, Nullable<int> createdBy, string mode)
        {
            var stockCheckingIDParameter = stockCheckingID.HasValue ?
                new ObjectParameter("StockCheckingID", stockCheckingID) :
                new ObjectParameter("StockCheckingID", typeof(int));
    
            var stockDateParameter = stockDate.HasValue ?
                new ObjectParameter("StockDate", stockDate) :
                new ObjectParameter("StockDate", typeof(System.DateTime));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var modeParameter = mode != null ?
                new ObjectParameter("Mode", mode) :
                new ObjectParameter("Mode", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StockAudit_insert", stockCheckingIDParameter, stockDateParameter, warehouseIDParameter, createdByParameter, modeParameter);
        }
    
        public virtual ObjectResult<StockAudit_List_Result> StockAudit_List(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockAudit_List_Result>("StockAudit_List", warehouseIDParameter);
        }
    
        public virtual ObjectResult<StockAudit_Search_Result> StockAudit_Search(Nullable<int> warehouseID, Nullable<System.DateTime> asonDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockAudit_Search_Result>("StockAudit_Search", warehouseIDParameter, asonDateParameter);
        }
    
        public virtual ObjectResult<Nullable<System.DateTime>> StockAudit_Validation(Nullable<int> warehouseID, Nullable<System.DateTime> asonDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<System.DateTime>>("StockAudit_Validation", warehouseIDParameter, asonDateParameter);
        }
    
        public virtual ObjectResult<StockAuditEdit_List_Result> StockAuditEdit_List(Nullable<int> warehouseID, Nullable<System.DateTime> asonDate)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var asonDateParameter = asonDate.HasValue ?
                new ObjectParameter("AsonDate", asonDate) :
                new ObjectParameter("AsonDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StockAuditEdit_List_Result>("StockAuditEdit_List", warehouseIDParameter, asonDateParameter);
        }
    
        public virtual ObjectResult<string> StopDeliveryOrder_insert(Nullable<int> stopDeliveryID, Nullable<int> waherhouseID, Nullable<int> customerID, Nullable<bool> release, string remarks, Nullable<int> createdBy)
        {
            var stopDeliveryIDParameter = stopDeliveryID.HasValue ?
                new ObjectParameter("StopDeliveryID", stopDeliveryID) :
                new ObjectParameter("StopDeliveryID", typeof(int));
    
            var waherhouseIDParameter = waherhouseID.HasValue ?
                new ObjectParameter("WaherhouseID", waherhouseID) :
                new ObjectParameter("WaherhouseID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var releaseParameter = release.HasValue ?
                new ObjectParameter("Release", release) :
                new ObjectParameter("Release", typeof(bool));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("StopDeliveryOrder_insert", stopDeliveryIDParameter, waherhouseIDParameter, customerIDParameter, releaseParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<StopDeliveryOrder_List_Result> StopDeliveryOrder_List(Nullable<int> waherhouseID)
        {
            var waherhouseIDParameter = waherhouseID.HasValue ?
                new ObjectParameter("WaherhouseID", waherhouseID) :
                new ObjectParameter("WaherhouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StopDeliveryOrder_List_Result>("StopDeliveryOrder_List", waherhouseIDParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> StopDeliveryOrder_Validation(Nullable<int> customerID, Nullable<int> waherhouseID)
        {
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var waherhouseIDParameter = waherhouseID.HasValue ?
                new ObjectParameter("WaherhouseID", waherhouseID) :
                new ObjectParameter("WaherhouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("StopDeliveryOrder_Validation", customerIDParameter, waherhouseIDParameter);
        }
    
        public virtual ObjectResult<StorageADD_Select_Result> StorageADD_Select(Nullable<int> storageAreaID)
        {
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StorageADD_Select_Result>("StorageADD_Select", storageAreaIDParameter);
        }
    
        public virtual ObjectResult<StorageArea_Select_Result> StorageArea_Select(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StorageArea_Select_Result>("StorageArea_Select", warehouseIDParameter);
        }
    
        public virtual int StorageAreas_Insert(Nullable<int> storageAreaID, Nullable<int> createdBy, Nullable<int> blockID)
        {
            var storageAreaIDParameter = storageAreaID.HasValue ?
                new ObjectParameter("StorageAreaID", storageAreaID) :
                new ObjectParameter("StorageAreaID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("createdBy", createdBy) :
                new ObjectParameter("createdBy", typeof(int));
    
            var blockIDParameter = blockID.HasValue ?
                new ObjectParameter("BlockID", blockID) :
                new ObjectParameter("BlockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("StorageAreas_Insert", storageAreaIDParameter, createdByParameter, blockIDParameter);
        }
    
        public virtual ObjectResult<string> StorageAreaType_Insert_Update(Nullable<int> storageAreaTypeID, string storageAreaType, Nullable<int> temperatureCategoryID, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var storageAreaTypeIDParameter = storageAreaTypeID.HasValue ?
                new ObjectParameter("StorageAreaTypeID", storageAreaTypeID) :
                new ObjectParameter("StorageAreaTypeID", typeof(int));
    
            var storageAreaTypeParameter = storageAreaType != null ?
                new ObjectParameter("StorageAreaType", storageAreaType) :
                new ObjectParameter("StorageAreaType", typeof(string));
    
            var temperatureCategoryIDParameter = temperatureCategoryID.HasValue ?
                new ObjectParameter("TemperatureCategoryID", temperatureCategoryID) :
                new ObjectParameter("TemperatureCategoryID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("StorageAreaType_Insert_Update", storageAreaTypeIDParameter, storageAreaTypeParameter, temperatureCategoryIDParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual ObjectResult<StorageAreaType_Select_Result> StorageAreaType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<StorageAreaType_Select_Result>("StorageAreaType_Select");
        }
    
        public virtual ObjectResult<TaxDetail_Select_Result> TaxDetail_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaxDetail_Select_Result>("TaxDetail_Select");
        }
    
        public virtual int Taxes_Insert(Nullable<int> taxID, string taxCode, string taxDescription, Nullable<bool> isActive)
        {
            var taxIDParameter = taxID.HasValue ?
                new ObjectParameter("TaxID", taxID) :
                new ObjectParameter("TaxID", typeof(int));
    
            var taxCodeParameter = taxCode != null ?
                new ObjectParameter("TaxCode", taxCode) :
                new ObjectParameter("TaxCode", typeof(string));
    
            var taxDescriptionParameter = taxDescription != null ?
                new ObjectParameter("TaxDescription", taxDescription) :
                new ObjectParameter("TaxDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Taxes_Insert", taxIDParameter, taxCodeParameter, taxDescriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<Taxes_Select_Result> Taxes_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Taxes_Select_Result>("Taxes_Select");
        }
    
        public virtual ObjectResult<string> TaxType_Insert_Update(Nullable<int> taxTypeID, string code, string taxTypeDescription, Nullable<bool> isActive)
        {
            var taxTypeIDParameter = taxTypeID.HasValue ?
                new ObjectParameter("TaxTypeID", taxTypeID) :
                new ObjectParameter("TaxTypeID", typeof(int));
    
            var codeParameter = code != null ?
                new ObjectParameter("Code", code) :
                new ObjectParameter("Code", typeof(string));
    
            var taxTypeDescriptionParameter = taxTypeDescription != null ?
                new ObjectParameter("TaxTypeDescription", taxTypeDescription) :
                new ObjectParameter("TaxTypeDescription", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("isActive", isActive) :
                new ObjectParameter("isActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TaxType_Insert_Update", taxTypeIDParameter, codeParameter, taxTypeDescriptionParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<TaxType_Select_Result> TaxType_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TaxType_Select_Result>("TaxType_Select");
        }
    
        public virtual ObjectResult<string> TemperatureCategories_Insert(Nullable<int> tempCategoryID, string tempCategory, Nullable<decimal> minTemp, Nullable<decimal> maxTemp, Nullable<int> createdBy)
        {
            var tempCategoryIDParameter = tempCategoryID.HasValue ?
                new ObjectParameter("TempCategoryID", tempCategoryID) :
                new ObjectParameter("TempCategoryID", typeof(int));
    
            var tempCategoryParameter = tempCategory != null ?
                new ObjectParameter("TempCategory", tempCategory) :
                new ObjectParameter("TempCategory", typeof(string));
    
            var minTempParameter = minTemp.HasValue ?
                new ObjectParameter("MinTemp", minTemp) :
                new ObjectParameter("MinTemp", typeof(decimal));
    
            var maxTempParameter = maxTemp.HasValue ?
                new ObjectParameter("MaxTemp", maxTemp) :
                new ObjectParameter("MaxTemp", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("TemperatureCategories_Insert", tempCategoryIDParameter, tempCategoryParameter, minTempParameter, maxTempParameter, createdByParameter);
        }
    
        public virtual ObjectResult<TemperatureCategories_Select_Result> TemperatureCategories_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TemperatureCategories_Select_Result>("TemperatureCategories_Select");
        }
    
        public virtual ObjectResult<testingsp_Result> testingsp()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<testingsp_Result>("testingsp");
        }
    
        public virtual ObjectResult<string> Transfer_Cancelled(Nullable<int> transferID, Nullable<int> toCustomerID, string remarks, Nullable<int> createdBy, Nullable<int> warehouseID)
        {
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var toCustomerIDParameter = toCustomerID.HasValue ?
                new ObjectParameter("ToCustomerID", toCustomerID) :
                new ObjectParameter("ToCustomerID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Transfer_Cancelled", transferIDParameter, toCustomerIDParameter, remarksParameter, createdByParameter, warehouseIDParameter);
        }
    
        public virtual int Transfer_Insert(Nullable<int> transferID, Nullable<int> wareHouseID, Nullable<int> companyID, Nullable<int> fromCustomerID, Nullable<int> toCustomerID, Nullable<System.DateTime> transferDate, string orderGivenBy, string remarks, Nullable<int> createdBy, Nullable<int> financialYearID, Nullable<int> storageAreaMasterID)
        {
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var fromCustomerIDParameter = fromCustomerID.HasValue ?
                new ObjectParameter("FromCustomerID", fromCustomerID) :
                new ObjectParameter("FromCustomerID", typeof(int));
    
            var toCustomerIDParameter = toCustomerID.HasValue ?
                new ObjectParameter("ToCustomerID", toCustomerID) :
                new ObjectParameter("ToCustomerID", typeof(int));
    
            var transferDateParameter = transferDate.HasValue ?
                new ObjectParameter("TransferDate", transferDate) :
                new ObjectParameter("TransferDate", typeof(System.DateTime));
    
            var orderGivenByParameter = orderGivenBy != null ?
                new ObjectParameter("OrderGivenBy", orderGivenBy) :
                new ObjectParameter("OrderGivenBy", typeof(string));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var financialYearIDParameter = financialYearID.HasValue ?
                new ObjectParameter("FinancialYearID", financialYearID) :
                new ObjectParameter("FinancialYearID", typeof(int));
    
            var storageAreaMasterIDParameter = storageAreaMasterID.HasValue ?
                new ObjectParameter("StorageAreaMasterID", storageAreaMasterID) :
                new ObjectParameter("StorageAreaMasterID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Transfer_Insert", transferIDParameter, wareHouseIDParameter, companyIDParameter, fromCustomerIDParameter, toCustomerIDParameter, transferDateParameter, orderGivenByParameter, remarksParameter, createdByParameter, financialYearIDParameter, storageAreaMasterIDParameter);
        }
    
        public virtual ObjectResult<Transfer_List_Result> Transfer_List(Nullable<int> wareHouseID)
        {
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Transfer_List_Result>("Transfer_List", wareHouseIDParameter);
        }
    
        public virtual ObjectResult<TransferEdit_List_Result> TransferEdit_List(Nullable<int> transferID, Nullable<int> wareHouseID)
        {
            var transferIDParameter = transferID.HasValue ?
                new ObjectParameter("TransferID", transferID) :
                new ObjectParameter("TransferID", typeof(int));
    
            var wareHouseIDParameter = wareHouseID.HasValue ?
                new ObjectParameter("WareHouseID", wareHouseID) :
                new ObjectParameter("WareHouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<TransferEdit_List_Result>("TransferEdit_List", transferIDParameter, wareHouseIDParameter);
        }
    
        public virtual ObjectResult<UIMaster_Grid_Result> UIMaster_Grid()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UIMaster_Grid_Result>("UIMaster_Grid");
        }
    
        public virtual ObjectResult<string> UIMaster_Insert(Nullable<int> uIMasterID, Nullable<int> uIGroupID, string uIName, string displayName, Nullable<int> sequenceNo, string path, Nullable<bool> isActive, Nullable<int> createdBy)
        {
            var uIMasterIDParameter = uIMasterID.HasValue ?
                new ObjectParameter("UIMasterID", uIMasterID) :
                new ObjectParameter("UIMasterID", typeof(int));
    
            var uIGroupIDParameter = uIGroupID.HasValue ?
                new ObjectParameter("UIGroupID", uIGroupID) :
                new ObjectParameter("UIGroupID", typeof(int));
    
            var uINameParameter = uIName != null ?
                new ObjectParameter("UIName", uIName) :
                new ObjectParameter("UIName", typeof(string));
    
            var displayNameParameter = displayName != null ?
                new ObjectParameter("DisplayName", displayName) :
                new ObjectParameter("DisplayName", typeof(string));
    
            var sequenceNoParameter = sequenceNo.HasValue ?
                new ObjectParameter("SequenceNo", sequenceNo) :
                new ObjectParameter("SequenceNo", typeof(int));
    
            var pathParameter = path != null ?
                new ObjectParameter("Path", path) :
                new ObjectParameter("Path", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("UIMaster_Insert", uIMasterIDParameter, uIGroupIDParameter, uINameParameter, displayNameParameter, sequenceNoParameter, pathParameter, isActiveParameter, createdByParameter);
        }
    
        public virtual int Update_EmailNotification_Error()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Update_EmailNotification_Error");
        }
    
        public virtual int UpdateAllStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAllStock");
        }
    
        public virtual ObjectResult<Nullable<int>> UpdateTheme(Nullable<int> userID, Nullable<int> themeID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var themeIDParameter = themeID.HasValue ?
                new ObjectParameter("ThemeID", themeID) :
                new ObjectParameter("ThemeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("UpdateTheme", userIDParameter, themeIDParameter);
        }
    
        public virtual int UserCompany_Insert(Nullable<int> userCompanyID, Nullable<int> createdBy)
        {
            var userCompanyIDParameter = userCompanyID.HasValue ?
                new ObjectParameter("UserCompanyID", userCompanyID) :
                new ObjectParameter("UserCompanyID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UserCompany_Insert", userCompanyIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<UserCompany_Select_Result> UserCompany_Select(Nullable<int> userID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserCompany_Select_Result>("UserCompany_Select", userIDParameter);
        }
    
        public virtual ObjectResult<UserCompanyList_select_Result> UserCompanyList_select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserCompanyList_select_Result>("UserCompanyList_select");
        }
    
        public virtual ObjectResult<UserCompanyWareHouseList_select_Result> UserCompanyWareHouseList_select(Nullable<int> userID, Nullable<int> companyID)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<UserCompanyWareHouseList_select_Result>("UserCompanyWareHouseList_select", userIDParameter, companyIDParameter);
        }
    
        public virtual int Users_Insert(Nullable<int> userID, string userName, string userDetail, string password, Nullable<int> roleID, Nullable<int> userTypeID, Nullable<int> createdBy)
        {
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var userDetailParameter = userDetail != null ?
                new ObjectParameter("UserDetail", userDetail) :
                new ObjectParameter("UserDetail", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var userTypeIDParameter = userTypeID.HasValue ?
                new ObjectParameter("UserTypeID", userTypeID) :
                new ObjectParameter("UserTypeID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Users_Insert", userIDParameter, userNameParameter, userDetailParameter, passwordParameter, roleIDParameter, userTypeIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Users_Select_Result> Users_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Users_Select_Result>("Users_Select");
        }
    
        public virtual ObjectResult<string> Warehouse_Insert_Update(Nullable<int> warehouseID, Nullable<int> companyID, string warehouseName, string warehouseCode, string address1, string address2, string address3, string telNumber, string fax, string emailID, Nullable<int> cityId, byte[] logo, Nullable<int> createdby)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var companyIDParameter = companyID.HasValue ?
                new ObjectParameter("CompanyID", companyID) :
                new ObjectParameter("CompanyID", typeof(int));
    
            var warehouseNameParameter = warehouseName != null ?
                new ObjectParameter("WarehouseName", warehouseName) :
                new ObjectParameter("WarehouseName", typeof(string));
    
            var warehouseCodeParameter = warehouseCode != null ?
                new ObjectParameter("WarehouseCode", warehouseCode) :
                new ObjectParameter("WarehouseCode", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("Address1", address1) :
                new ObjectParameter("Address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("Address2", address2) :
                new ObjectParameter("Address2", typeof(string));
    
            var address3Parameter = address3 != null ?
                new ObjectParameter("Address3", address3) :
                new ObjectParameter("Address3", typeof(string));
    
            var telNumberParameter = telNumber != null ?
                new ObjectParameter("TelNumber", telNumber) :
                new ObjectParameter("TelNumber", typeof(string));
    
            var faxParameter = fax != null ?
                new ObjectParameter("Fax", fax) :
                new ObjectParameter("Fax", typeof(string));
    
            var emailIDParameter = emailID != null ?
                new ObjectParameter("EmailID", emailID) :
                new ObjectParameter("EmailID", typeof(string));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(int));
    
            var logoParameter = logo != null ?
                new ObjectParameter("Logo", logo) :
                new ObjectParameter("Logo", typeof(byte[]));
    
            var createdbyParameter = createdby.HasValue ?
                new ObjectParameter("createdby", createdby) :
                new ObjectParameter("createdby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Warehouse_Insert_Update", warehouseIDParameter, companyIDParameter, warehouseNameParameter, warehouseCodeParameter, address1Parameter, address2Parameter, address3Parameter, telNumberParameter, faxParameter, emailIDParameter, cityIdParameter, logoParameter, createdbyParameter);
        }
    
        public virtual ObjectResult<Warehouses_Select_Result> Warehouses_Select()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Warehouses_Select_Result>("Warehouses_Select");
        }
    
        public virtual ObjectResult<GetStorageArea_byWarehouse_Result> GetStorageArea_byWarehouse(Nullable<int> warehouseID)
        {
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStorageArea_byWarehouse_Result>("GetStorageArea_byWarehouse", warehouseIDParameter);
        }
    
        public virtual ObjectResult<Accountuser_Login_Result> Accountuser_Login(string userName, string password)
        {
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Accountuser_Login_Result>("Accountuser_Login", userNameParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> Receipt_Cancelled(Nullable<int> receiptID, Nullable<int> receiptTypeID, string remarks, Nullable<int> createdBy)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var receiptTypeIDParameter = receiptTypeID.HasValue ?
                new ObjectParameter("ReceiptTypeID", receiptTypeID) :
                new ObjectParameter("ReceiptTypeID", typeof(int));
    
            var remarksParameter = remarks != null ?
                new ObjectParameter("Remarks", remarks) :
                new ObjectParameter("Remarks", typeof(string));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Receipt_Cancelled", receiptIDParameter, receiptTypeIDParameter, remarksParameter, createdByParameter);
        }
    
        public virtual ObjectResult<Receipt_Detail_Edit_Result> Receipt_Detail_Edit(Nullable<int> receiptID, Nullable<int> warehouseID, Nullable<int> receiptTypeID)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            var warehouseIDParameter = warehouseID.HasValue ?
                new ObjectParameter("WarehouseID", warehouseID) :
                new ObjectParameter("WarehouseID", typeof(int));
    
            var receiptTypeIDParameter = receiptTypeID.HasValue ?
                new ObjectParameter("ReceiptTypeID", receiptTypeID) :
                new ObjectParameter("ReceiptTypeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Receipt_Detail_Edit_Result>("Receipt_Detail_Edit", receiptIDParameter, warehouseIDParameter, receiptTypeIDParameter);
        }
    
        public virtual ObjectResult<string> CustomerVerifiedDocuments_insert(Nullable<int> customerVerifiedDocumentsID, Nullable<int> customerDocID, Nullable<int> customerID, Nullable<int> createdBy)
        {
            var customerVerifiedDocumentsIDParameter = customerVerifiedDocumentsID.HasValue ?
                new ObjectParameter("CustomerVerifiedDocumentsID", customerVerifiedDocumentsID) :
                new ObjectParameter("CustomerVerifiedDocumentsID", typeof(int));
    
            var customerDocIDParameter = customerDocID.HasValue ?
                new ObjectParameter("CustomerDocID", customerDocID) :
                new ObjectParameter("CustomerDocID", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("CustomerVerifiedDocuments_insert", customerVerifiedDocumentsIDParameter, customerDocIDParameter, customerIDParameter, createdByParameter);
        }
    
        public virtual ObjectResult<CustomerVerifiedDocuments_List_Result> CustomerVerifiedDocuments_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CustomerVerifiedDocuments_List_Result>("CustomerVerifiedDocuments_List");
        }
    
        public virtual ObjectResult<GetCustomerDocumentVerification_List_Result> GetCustomerDocumentVerification_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomerDocumentVerification_List_Result>("GetCustomerDocumentVerification_List");
        }
    
        public virtual ObjectResult<SpecialRate_List_Result> SpecialRate_List()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpecialRate_List_Result>("SpecialRate_List");
        }
    
        public virtual ObjectResult<string> ModifyProductRate_Insert(Nullable<int> productID, Nullable<int> rateID, Nullable<int> serviceId, Nullable<decimal> rate, Nullable<int> createdBy, Nullable<int> customerID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            var rateIDParameter = rateID.HasValue ?
                new ObjectParameter("RateID", rateID) :
                new ObjectParameter("RateID", typeof(int));
    
            var serviceIdParameter = serviceId.HasValue ?
                new ObjectParameter("serviceId", serviceId) :
                new ObjectParameter("serviceId", typeof(int));
    
            var rateParameter = rate.HasValue ?
                new ObjectParameter("Rate", rate) :
                new ObjectParameter("Rate", typeof(decimal));
    
            var createdByParameter = createdBy.HasValue ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(int));
    
            var customerIDParameter = customerID.HasValue ?
                new ObjectParameter("CustomerID", customerID) :
                new ObjectParameter("CustomerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("ModifyProductRate_Insert", productIDParameter, rateIDParameter, serviceIdParameter, rateParameter, createdByParameter, customerIDParameter);
        }
    }
}
